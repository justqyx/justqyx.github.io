<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontend | JustQyx]]></title>
  <link href="http://www.justqyx.me/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:29:17+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Prototype]]></title>
    <link href="http://www.justqyx.me/blog/2013/11/23/javascript-prototype/"/>
    <updated>2013-11-23T10:36:00+00:00</updated>
    <id>http://www.justqyx.me/blog/2013/11/23/javascript-prototype</id>
    <content type="html"><![CDATA[<p>虽然 Javascript 一开始就为浏览器而生，但是从现在开始，请不要把 Javascript 和浏览器联系起来，
就仅仅把它当成是一门只要有解释器(如谷歌的V8引擎)就可以运行的东西。</p>

<p>在你的机器装上 <code>nodejs</code>，然后执行 <code>node example.js</code>，即可调试 js 代码。</p>

<h2>原型程序设计</h2>

<blockquote><p>原型程式设计或称为基于原型的编程、原型编程，是面向对象编程的子系统和一种方式。</p>

<p>在原型编程中，类不是实时的，而且行为重用（通常认为继承自基于类的语言）是通过复制已经存在的原型对象的过程实现的。</p>

<p>这个模型一般被认为是 classless、面向原型、或者是基于实例的编程。</p></blockquote>

<p><strong>与基于类的模型比较</strong></p>

<blockquote><p>在基于类的编程当中，对象总共有两种类型。
类定义了对象的基本布局和函数特性，而接口是“可以使用的”对象，它基于特定类的样式。
在此模型中，类表现为行为和结构的集合，就接口持有对象的数据而言，对所有接口来说是相同的。
区分规则因而首先是基于结构和行为，而后是状态。</p>

<p>原型编程的主张者经常争论说基于类的语言提倡使用一个关注分类和类之间关系开发模型。
与此相对，原型编程看起来提倡程序员关注一系列对象实例的行为，而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象，而不是分成类。
因为如此，很多基于原型的系统提倡运行时原型的修改，而只有极少数基于类的面向对象系统（比如第一个动态面向对象的系统 Smalltalk）允许类在程序运行时被修改。</p></blockquote>

<h2>对象构造</h2>

<blockquote><p>在基于原型的系统中构造对象有两种方法：通过<code>复制已有的对象</code>或者 <code>扩展nihilo(空的)对象</code>创建。
因为大多数系统提供了不同的复制方法，扩展 nihilo 对象的方式鲜为人知。</p>

<p>提供扩展 nihilo 对象创建的系统，允许对象从空白中创建而无需从已有的原型中复制。
这样的系统提供特殊的文法用以指定新对象的行为和属性，无需参考已存在的对象。</p>

<p>在很多原型语言中，通常有一个 Object 原型，其中有普遍需要的方法。它被用作所有其他对象的最终原型。
扩展 nihilo 对象创建可以保证新对象不会被顶级对象的命名空间污染。</p>

<p>如，在 Mozilla 的 Javscript 实现中，可以通过设置一个新创建对象的 _proto_ 属性为 null 来做到。</p></blockquote>

<h2>模拟创建类</h2>

<p>Javascript 是基于原型的编程语言，没有包含对内置类的实现。</p>

<p>但是也可以轻易地模拟出经典的类。 因为有 <code>构造函数</code> 和 <code>new运算符</code>。</p>

<p>任何 Javascript 函数可以当成构造函数来使用，构造函数必须使用 <code>new运算符</code> 作为前缀来创建新的实例。</p>

<pre><code class="javascript">var Person = function(name){
  this.name = name;
}

// 实例化一个 Person
var alice = new Person("alice");

// 检查这个实例
assert(alice instanceof Person);
</code></pre>

<p><strong>new 运算符的作用</strong></p>

<p>简单来讲：<code>new 运算符</code> 改变了函数执行的上下文，同时改变了 return 语句的行为。</p>

<p>当使用 <code>new</code> 来调用构造函数时，执行上下文就变成一个空的上下文(如在浏览器中就是从 window 全局对象 变成一个空的上下文 )，这个上下文代表了新生成的实例。</p>

<p>因此 this 关键字指向当前创建的实例。</p>

<p>默认情况下，如果你的构造函数中没有返回任何内容，就会返回 this &ndash; 当前的上下文。</p>

<h2>理解 prototype</h2>

<p>简单地来讲，<code>prototype</code> 就是用来存储实例对象公共的属性或是行为。</p>

<p>例如，狗和猫，都是动物。于是：</p>

<pre><code class="javascript">var Animal = function(sound){
  this.sound = sound;
}

Animal.prototype.public_name = "动物";

Animal.prototype.belongs_to = function(){
  console.log(this.public_name);
}

var cat = new Animal("喵喵");
var dog = new Animal("旺旺");

cat.belongs_to(); // =&gt; 动物
dog.belongs_to(); // =&gt; 动物
</code></pre>

<p><strong>方法查找</strong></p>

<p>其实，prototype 是一个模板对象，它所有的属性或行为被用作初始化一个新对象。</p>

<p>当访问属性或是行为时，查找的顺序是：<code>对象 -&gt; 对象的prototype</code>，</p>

<p>所以，上面的 cat 和 dog 其实调用的都是 prototype 里的方法。</p>

<p>所以，当你重写 <code>cat 的 belongs_to</code> 这个行为时，是不会对 <code>dog 的 belongs_to</code> 造成任何影响的。</p>

<pre><code class="javascript">var Animal = function(sound){
  this.sound = sound;
}

Animal.prototype.public_name = "动物";

Animal.prototype.belongs_to = function(){
  console.log(this.public_name);
}

var cat = new Animal("喵喵");
var dog = new Animal("旺旺");

cat.belongs_to = function(){
  console.log("啦啦啦啦");
};

cat.belongs_to(); // =&gt; 啦啦啦啦
dog.belongs_to(); // =&gt; 动物
</code></pre>

<h2>理解 inherit</h2>

<p>(下面提及的继承，都是指针对构造函数的继承，不是非构造函数的继承)</p>

<p>其实继承也是很简单的，在 Javascript 更多地体现为 <code>prototype 的链接关系</code>。</p>

<p>现在，我们把上面的 <code>Animal 实例化对象</code> 也抽象成 <code>Cat 类</code>，并且让 Cat 将 Animal 的属性和行为都继承过来。</p>

<pre><code class="javascript">var Animal = function(){};
var Cat = function(){}

Cat.prototype = Animal.prototype;
</code></pre>

<p>这样，Animal.prototype 里所有的属性和行为，都会被 Cat 继承。</p>

<p><strong>但是，直接这样写是有问题的</strong></p>

<ol>
<li>只要修改了 <code>Cat.prototype</code> 都会影响到 <code>Animal.prototype</code></li>
<li>Cat.constructor(即 Cat.prototype.constructor) 变成了 Animal.constructor(即 Animal.prototype.constructor)</li>
</ol>


<p>(注：每个构造函数，也是一个对象，并且其默认的 Obj.prototype.constructor 就是构造函数本身)。</p>

<p>所以，我们要这么写：</p>

<pre><code class="javascript">var Animal = function(){};
var Cat = function(){}

var F = function(){};
F.prototype = Animal.prototype;
Cat.prototype = new F();

// 将构造函数重新指回 Cat
Cat.prototype.constructor = Cat;
</code></pre>

<p>F 是空对象，几乎不占用内存。并且，对 <code>Cat.prototype</code> 的修改， 只会直接反映到 <code>new F()</code> 这个<code>匿名实例对象</code>上，</p>

<p>而不会到 <code>Animal.prototype</code> 上。</p>

<p><strong>我们也来包装包装</strong></p>

<pre><code class="javascript">var NB = {
  extend: function(child, parent){
    var F = function(){}
    F.prototype = parent.prototype;
    child.prototype = new F();
    child.prototype.constructor = child;
  };
}

NB.extend(Cat, Animal);
</code></pre>

<h2>总结</h2>

<ol>
<li>任何函数都是 <code>构造函数</code></li>
<li>通过设置 <code>prototype</code> 属性来实现基本的代码重用</li>
<li>继承，其实是通过 <code>prototype</code> 的链接来实现的，只是在这过程中，要注意不要影响原来的 “类” 和各自的 <code>constructor</code></li>
</ol>


<p><strong>题外话</strong></p>

<p>Javascript 就是弱化了 class 的概念，但是在现代的编程中，随着我们的 Web 应用越来越庞大，编写易读易维护的 Javascript 代码就越来越重要了。</p>

<p>出现了许多好用的东西，如 jQuery，还有许多的 MVC框架，如：Backbone, EmberJS, AugularJS。</p>

<h2>References</h2>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html">Javascript继承机制的设计思想</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html">构造函数的继承</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass learning (revised)]]></title>
    <link href="http://www.justqyx.me/blog/2013/07/29/sass/"/>
    <updated>2013-07-29T23:01:00+00:00</updated>
    <id>http://www.justqyx.me/blog/2013/07/29/sass</id>
    <content type="html"><![CDATA[<h2>为什么写？</h2>

<p>第一次用 Sass 时，应该是今年一月份的时候，
那时候对 Sass 的认识很简单，仅仅将其理解为CSS的几个框架之一，
作用在于给我们提供一些有用的方法，可以帮我们快速方便地书写 CSS，并且解决了一些浏览器兼容的问题。</p>

<p>而最近，随着使用越来越多，发现自己写的 CSS 代码很糟糕。
虽然用着 Sass，可是使用的方式，其实与最开始随便写 CSS 代码一样的逻辑，并没有质的变化。</p>

<p>我深刻地意识到这一点，于是决心改变，原因很简单，我的代码代表了我自己，怎样的代码就代表怎样的我。</p>

<h2>什么是 <code>Sass</code> ？ 因何而生 ？</h2>

<p>Sass 是 CSS 的一种方言，通过编译器实现将其转化为 CSS。</p>

<p><strong>1. 什么是方言？</strong></p>

<p>其实很好理解，就如汇编是机器代码的一种方言，C 是汇编语言的一种方言。</p>

<p>汇编可通过自己的编译器将其转换为二进制代码，而 C 可通过自己的编译器转换为汇编语言。</p>

<p>我是这么去理解“方言”这二字的。</p>

<p><strong>2. 为何出现方言？</strong></p>

<p>我觉得，在计算机的世界里，“方言”的出现无非就是为了解决我们软件开发的几大问题：</p>

<ol>
<li>代码重用</li>
<li>易于维护</li>
</ol>


<p>额，我暂时也就想到这两个，请原谅我这低水平的攻城师。</p>

<p>于是，从上面看来，Sass 的出现也必定是为了解决 CSS 出现的一些问题。</p>

<p><strong>3. Sass 等 CSS 方言（这里也可理解为框架）为何出现？</strong></p>

<p>上面已经说了，Sass 的出现，是为了解决 CSS 的一些问题，而这些问题是什么呢？</p>

<p><a href="http://www.oschina.net/translate/css-cascading-separation-abstraction">从这里摘了一句话</a></p>

<blockquote><p>LESS 和 Sass（或者类似方案）从三个方面解决了 CSS 存在的问题：分离，抽象和层叠</p></blockquote>

<p>我在我自己写 CSS 的过程中发现代码十分混乱，我觉得我自己到现在为止，经历了两个过程：</p>

<ol>
<li>按设计，一点一点写 CSS，几乎没有结构性，没有代码复用，维护困难</li>
<li>将公用的放在 <code>public.css</code> 文件里，然后每个页面一个 <code>page.css</code>，按<code>布局相关的代码</code>放在最上面，<code>内容样式的代码</code>按照一块一块放在布局的下面</li>
</ol>


<p>这是我自己摸索着前进的一个过程，后来接触了 Sass，由于没有理解其意义所在，
于是也只是用新的一种 CSS 方言然后按照以前的方式继续写样式。</p>

<p>即使得益与方言本身的特点，代码有所改善，但是我觉得，这是一种死板的思维。</p>

<p>说到这里，也许你会发现，我没在讲为何会出现 <code>Sass</code>，而是在讲我自己学 CSS 的一个过程，其实我遇到的问题，
很多人已经遇到了，而我想，这也应该是 <code>Sass</code> 出现的原因之某些吧。</p>

<p>[<strong>分离</strong>] 将内容和样式进行分离，并且，分离的程度有多高</p>

<p>[<strong>抽象</strong>] 混合类、变量、继承，是实现抽象的基础，抽象，使得我们可以将很多共性的样式抽出出来，并统一放在某个文件夹下， 在我们需要的时候，我们直接引进来即可</p>

<p>[<strong>层叠</strong>]层叠的复杂性最高，我自己也不是很清楚，大概就是同一个样式在多个地方出现，如</p>

<pre><code class="css">.main {
  //...
}

.main .div {
  // ...
}

.main .div p {
  // ...
}
</code></pre>

<p>而 <code>Sass</code> 的嵌套和子选择器，使得有效得减少了一些样式的层叠，但这也并未彻底解决层叠的问题。
并且我觉得，其与个人的能力和对其理解的程度相关。
毕竟，同样的工具，其发挥的效果会跟个人的能力密切相关。</p>

<h2>项目中，如何组织好 Sass 的代码结构</h2>

<p>最基本的，在我们的 Web 项目里，CSS应该有三种：</p>

<pre><code>stylesheets/
| - reset.css
  - public.css
  - page-1.css
  - page-2.css
  - page-n.css
</code></pre>

<p>第一种即重新设定所有标签的默认样式，使得各个浏览器都能保持一致。</p>

<p>第二种就是我们公用的CSS代码啦。</p>

<p>第三种就是我们的页面代码，即每个页面我们都给它一个CSS文件。</p>

<p>通过这种方式，我们至少能够比较好地维护我们的代码。</p>

<p>在 <a href="http://thesassway.com/beginner/how-to-structure-a-sass-project">How to structure a Sass project</a> 文中，阐述了这样的一个基本目录结构</p>

<p><img src="/downloads/images/sass.png"></p>

<ul>
<li><p><code>modules</code></p>

<p>文件夹主要包含三种类型的代码：mixins(混合类)、functions、variables</p>

<p>这里可以理解为将我们三面的 <code>public.css</code> 分得更细，并且利用 sass，
能够做到更好的抽象，提高代码复用率和维护性。</p>

<p>比如我们整个网站的按钮样式，就可以放在 modules 里，可取名为：<code>_button.css.scss</code></p>

<p>这里面定义了按钮的一些基本样式，如字体大小，边框、圆角、背景颜色等，
之后我们在其他地方使用时就可以直接引进来，并且，
如果我全站要对按钮做一个修改，那么我们也就直接改 <code>_button.css.scss</code> 即可。</p>

<p>最后，我们可增加一个文件 <code>/modules/_all.css.scss</code>，以便对 modules 进行统一管理，
这样，外面直接 import 这个 all 文件就可以了</p></li>
<li><p><code>particals</code></p>

<p>我个人理解为 <code>components(组件)</code>，为何这么理解呢？</p>

<p>从文章中阐述到，这里面可以放例如 <code>header</code>、<code>content</code>、<code>sidebar</code>、<code>footer</code>
等一些组件的样式，而这些组件，都是构成某个页面的一部分。</p>

<p>最后，我们也跟上面一样，可增加一个 <code>base.css.scss</code> 文件来管理 partials。</p></li>
</ul>


<h2>我喜欢的组织方式</h2>

<pre><code>stylesheets/
|
|-- components/
  |-- all.css.scss
  |-- button.css.scss
  |-- footer.css.scss
  |-- ...
|-- reset.css.scss
|-- base.css.scss
|
|-- variables.css.scss
|
|-- _mixins.css.scss
|
|-- page1.css.scss
|-- page2.css.scss
|-- ....
|--
|-- application.css.scss
</code></pre>

<p>将网站的组件放在 <code>components</code> 里，然后由 <code>all.css.scss</code> 来维护整个目录，
外面只要 <code>@import 'components/all';</code> 即可。</p>

<p><code>mixins.css.scss</code>，定义一些会重用到的代码。</p>

<p><code>variables</code>，存放网站统一的变量，如字体、颜色等等。</p>

<p>而 <code>base.css.scss</code> 应该是这样的</p>

<pre><code class="css">@import "reset";
@import "mixins";
@import "components/all";


// 全局布局的维护
// ...

// 一些其他公用的代码，如全局统一 a 标签的样式
// ...
</code></pre>

<p><code>application.css.scss</code> 应该是这样的</p>

<pre><code class="css">@import 'base';

@import 'page1';
@import 'page2';
@import 'page3';

// ...
</code></pre>

<h2>几个注意点</h2>

<p>根据个人使用经验，在使用 Sass 等框架编写 CSS 代码时，应当注意：</p>

<ol>
<li>代码的嵌套不要超过 2 层</li>
<li>少用 extend</li>
</ol>


<pre><code class="scss">// 不建议

#main {
  .main-first {
    a {
      font-size: 12px;
      img {
        width: 20px;
        height: 20px;
      }
    }

  }

  .main-second {
    a {
      font-size: 12px;
    }
  }
}

// 建议

#main .main-first {
  a { font-size: 12px; }
  a img {
    width: 20px;
    height: 20px;
  }
}

#main .main-second {
  a { font-size: 12px; }
}
</code></pre>

<h2>同类框架</h2>

<ul>
<li>Less</li>
<li>Stylus</li>
</ul>


<h2>总结</h2>

<p>这次学习 Sass，改变以往的习惯，以往就是直接学语法，用得虽然快，
但是这种思维是不行的。</p>

<p>这次的话，我尝试去了解 Sass 出现的原因，其中最重要的就是6个字：分离、抽象、层叠。</p>

<p>因为SASS的语法很简单，所以基本不用怎么学，在 thesassway.com 里看了两篇基础的文章。
怎样构建SASS目录结构和嵌套选择器的一些注意事项，再结合自己的实际经历谈一些想法。</p>

<p>这次这篇写了三个晚上，期间，也重新去看了一下上面提到的两篇文章。</p>

<p>思维中断过，语句组织得也很随便，之后再来看看，也许会有一些新的收获。</p>

<p>对于我来说，写文章，就是跟自己在交流，这样最大的好处就是，把原本并不是很清楚的东西，
通过讲出来，写出来，从而有一个存在感、踏实感！</p>
]]></content>
  </entry>
  
</feed>
