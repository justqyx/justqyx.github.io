<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computer | JustQyx]]></title>
  <link href="http://www.justqyx.me/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:29:17+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[归并排序]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/merge-sort/"/>
    <updated>2016-02-15T09:23:24+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/merge-sort</id>
    <content type="html"><![CDATA[<p>归并排序（Merge sort），是建立在归并操作上的一种有效排序算法，时间复杂度为 O(n*log(n))。1945 年由约翰•冯•诺依曼首次提出。
该算法采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p>

<h2>算法步骤</h2>

<p><strong>递归法</strong></p>

<ol>
<li>将序列每相邻两个数字进行归并操作，形成 floor(n/2) 个序列，排序后每个序列至多包含两个元素</li>
<li>将上述序列再次合并，形成 floor(n/4) 个序列，买个序列包含至多四个元素</li>
<li>重复步骤 2，直到所有元素排序完毕</li>
</ol>


<p>要点：首先需要将数列分割成尽可能小的数列，达到分治目的后再逐步合并。</p>

<p><strong>迭代法</strong></p>

<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入合并空间，并移动指针到下一位置</li>
<li>重复 3 步骤直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>


<h2>GIF 演示图</h2>

<p><img src="/downloads/images/Merge-sort-example-300px.gif"></p>

<h2>归并排序 VS 快速排序</h2>

<ul>
<li>在实践中，快速排序执行速率更快</li>
<li>归并排序首先将数列划分为最小的数列，在对数列进行排序的同时，递增地对数列进行合并</li>
<li>快速排序不断地通过 pivot 划分数列，直到数列递归地有序</li>
</ul>


<h2>实现</h2>

<p><strong>ruby 实现</strong></p>

<pre><code class="ruby">def merge(left, right)
    final = []

    until left.empty? or right.empty?
        final &lt;&lt; (left.first &lt; right.first ? left.shift : right.shift)
    end
    final + left + right
end

def merge_sort(array)
    return array if array.size &lt; 2
    pivot = array.size / 2
    merge(merge_sort(array[0...pivot]), merge_sort(array[pivot...-1]))
end
</code></pre>

<p><strong>C 实现（递归法）</strong></p>

<pre><code class="c">void merge_sort_recursive(int arr[], int reg[], int start, int end) {
    if (start &gt;= end) {
        return;
    }

    int len = end - start;
    int mid = (len &gt;&gt; 1 + start); // 右移一位，相当于除以 2

    int start1 = start;
    int end1 = mid;
    int start2 = mid + 1;
    int end2 = end;

    merge_sort_recursive(arr, reg, start1, end1);
    merge_sort_recursive(arr, reg, start2, end2);

    int k = start;

    // 三个 while 实现了两个序列的有序合并

    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) {
        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];
    }

    while (start1 &lt;= end1) {
        reg[k++] = arr[start1++];
    }

    while (start2 &lt;= end2) {
        reg[k++] = arr[start2++];
    }

    for (k = start; k &lt;= end; k++) {
        arr[k] = reg[k];
    }
}

void merge_sort(int arr[], const int len) {
    int reg[len];
    merge_sort_recursive(arr, reg, 0, len-1);
}
</code></pre>

<p><strong>C 实现（迭代法）</strong></p>

<pre><code class="c">int min(int x, int y) {
    return x &lt; y ? x : y;
}
void merge_sort(int arr[], int len) {
    int* a = arr;
    int* b = (int*) malloc(len * sizeof(int*));
    int seg, start;
    // 使得内循环的 2seg+1 片段指数级变大，达到递归的效果
    for (seg = 1; seg &lt; len; seg += seg) {
        // 对 2seg+1 片段进行有序化
        for (start = 0; start &lt; len; start += seg + seg) {
            int low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);
            int k = low;
            int start1 = low, end1 = mid;
            int start2 = mid, end2 = high;
            while (start1 &lt; end1 &amp;&amp; start2 &lt; end2)
                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];
            while (start1 &lt; end1)
                b[k++] = a[start1++];
            while (start2 &lt; end2)
                b[k++] = a[start2++];
        }
        int* temp = a;
        a = b;
        b = temp;
    }
    if (a != arr) {
        int i;
        for (i = 0; i &lt; len; i++)
            b[i] = a[i];
        b = a;
    }
    free(b);
}
</code></pre>

<h2>Ref</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">wikipedia 归并排序</a></li>
<li><a href="https://ruby-china.org/topics/20569">https://ruby-china.org/topics/20569</a></li>
<li><a href="http://blog.jobbole.com/90256/">http://blog.jobbole.com/90256/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速排序]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/14/quick-sort/"/>
    <updated>2016-02-14T17:38:13+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/14/quick-sort</id>
    <content type="html"><![CDATA[<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>

<h2>算法步骤</h2>

<p><strong>递归法</strong></p>

<ol>
<li>从数列中挑出一个元素，称为基准（pivot）</li>
<li>重新排序数列，所有比 pivot 小的元素摆放在 pivot 左边，大的摆放在 pivot 右边。这个操作称为分割（partition）</li>
<li>递归地把 pivot 两边的子数列按 1 和 2 步骤继续排序</li>
</ol>


<p>要点：通过 pivot 不断地将数列分割成两个数列，达到分治的目的。</p>

<h2>时间复杂度</h2>

<ul>
<li>最好：O(n)</li>
<li>平均：O(n*log(n))</li>
<li>最差：O(n<sup>2</sup>)</li>
</ul>


<p>空间复杂度，不同实现不同。</p>

<p>快排在实践中，执行速度明显比其他具有相同时间复杂度的排序算法快。</p>

<h2>gif 演示图</h2>

<p><img src="/downloads/images/Quicksort-example.gif"></p>

<h2>实现</h2>

<p>Ruby 实现</p>

<pre><code class="ruby">def quick_sort arr
    return arr if arr.size &lt; 2
    left_arr, right_arr = arr[1..-1].partition { |item| item &lt;= arr.first }
    quick_sort(left_arr) + [arr.first] + quick_sort(right_arr)
end
</code></pre>

<p><strong>C 实现（递归）</strong></p>

<pre><code class="c">void swap(int *x, int *y) {
    int t = *x;
    *x = *y;
    *y = t;
}

void quick_sort(int arr[], int start, int end) {
    if (start &gt;= end) {
        return;
    }

    int pivot = arr[end];
    int left = start, right = end - 1;

    while (left &lt; right) {
        while (arr[left] &lt; pivot &amp;&amp; left &lt; right)
            left++;
        while (arr[right] &gt;= pivot &amp;&amp; left &lt; right)
            right++;
        swap(&amp;arr[left], &amp;arr[right]);
    }

    if (arr[left] &gt;= arr[end]) {
        swap(&amp;arr[left], &amp;arr[end]);
    } else {
        left++;
    }

    quick_sort(arr, start, left - 1);
    quick_sort(arr, left+1, end);
}
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://visualgo.net/sorting.html">http://visualgo.net/sorting.html</a></li>
<li><a href="https://ruby-china.org/topics/20569">经典排序算法及 Ruby 实现</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80">wikipedia-快速排序</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP 链路是如何 Keep-Alive 的]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/03/tcp-chain/"/>
    <updated>2016-02-03T13:51:50+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/03/tcp-chain</id>
    <content type="html"><![CDATA[<p>之前一直没有搞明白，HTTP 链路（即 TCP 链路）是如何 Keep-Alive 的。
这其实只是一个基础知识，只有知道与不知道的区别而已。</p>

<h2>如何定义一条 TCP 连接</h2>

<pre><code>&lt;源IP地址、源端口号、目的IP地址、目的端口号&gt;
</code></pre>

<p>这四个值一起唯一地定义了一条连接。两条不同的 TCP 连接不能拥有 4 个完全相同
的地址组件值。</p>

<h2>TCP 链路</h2>

<p>数据从我们的计算机发出，在到达目标机器之前，需要经过许多其他结点。
这其中的每一个结点，需要维护两个 TCP 连接对象，使其能够与上一个结点和下一个结点通讯，
类似双向链表。</p>

<p>于是，一条链路就这么形成了。</p>

<p>一旦其中某个结点断开了连接，即移除了 TCP 连接对象，那么整条链路也就断开了，
并以主动断开或主动探测或超时断开的机制，对整条链路的 TCP 连接对象进行回收。</p>

<h2>TCP 连接是昂贵的</h2>

<p>建立 TCP 连接需要首先建立起通讯链路，并完成三次握手，故建立 TCP 连接的操作是昂贵的。
因此，以下依次出现的三种机制，是为了对 TCP 链路资源有更高效率的使用。</p>

<p><strong>Keep-Alive</strong></p>

<p>这是 HTTP/1.0 规范中增加的，但 HTTP/1.1 已经废弃。
为的是在完成 HTTP 事务操作之后保持 TCP 连接不关闭，使得下一个请求发起时，不再需要重新建立 TCP 连接。</p>

<p><strong>Persistent</strong></p>

<p>与 HTTP/1.0+ 的 Keep-Alive 连接不同，HTTP/1.1 的连接在默认情况下是激活的，
除非特别指明，否则 HTTP/1.1 假定所有连接都是持久的。要在事务处理结束之后将
连接关闭，HTTP/1.1 应用程序必须向报文中显示地增加一个 <code>Connection: Close</code> 首部。
这是与以前的 HTTP 协议版本很重要的区别，在以前的版本中，Kepp-Alive 连接要么是可选的，
要么根本就不支持。</p>

<p><strong>管道化连接</strong></p>

<p>HTTP/1.1 允许在持久连接上可选地使用请求管道。这是相对于 Keep-Alive 连接的又一次性能优化。
在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向地球另一端的服务器时，
第二条和第三条请求也可以开始发送了。在高时延网络条件下，这样做可以降低网络的环回时间，
提高性能。</p>

<p>无论是 Keep-Alive 还是 Persistent 还是管道，HTTP 客户端都必须做好所有可能出错的情况，
因为在网络的世界里，每个结点都无法保证连接在那一刻是可用的，每个结点都可能随时关闭 TCP 连接。</p>

<h2>参考</h2>

<ul>
<li>《HTTP 权威指南》</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread]]></title>
    <link href="http://www.justqyx.me/blog/2014/12/30/thread/"/>
    <updated>2014-12-30T18:44:05+08:00</updated>
    <id>http://www.justqyx.me/blog/2014/12/30/thread</id>
    <content type="html"><![CDATA[<h2>进程、线程</h2>

<p>进程是指操作系统中正在运行的一个程序；线程是系统分配处理器时间的基本单元，或者说进程之类独立执行的一个单元。</p>

<p>对于操作系统而言，其调度单元是线程。</p>

<p>一个进程至少包括一个线程，通常将该线程称为主线程。进程从主线程的执行开始，进而创建一个或多个附加线程，这就是所谓的基于多线程的多任务。</p>

<p>进程是对正在运行程序的一个抽象，是一组资源（处理器、内存以及I/O设备）的集合体，进程把资源集中到一块，而线程才是 CPU 调度的实体。</p>

<p>进程与进程之间，内存空间是独立的，而线程与线程之间内存是共享的。</p>

<p>在单处理器的系统中，多线程是按时间片方式运行，即并发；
在多处理器的系统中，多个线程可以同时运行，即并行。</p>

<h2>线程模型</h2>

<ul>
<li><p><strong>内核级别线程（kernel-level threads）</strong></p>

<p>内核级别线程，是内核调度的基本单元，在每个进程中，至少存在一个内核级别线程。</p></li>
<li><p><strong>用户级别线程（user-level threads）</strong></p>

<p>用户进程自己实现的进程机制。在这种情况下，内核是不知道有多少线程存在的，同时线程上下文切换更快，而且在不支持多线程的操作系统上也能实现多线程。但是这种线程无法充分利用多处理器系统，如果进程中的一个线程执行阻塞的I/O请求，那么整个进程就会被阻塞。现在，大部分应用程序起来之后，其主线程就是一个用户级别的线程，它所能访问的资源是有限制的。</p></li>
<li><p><strong>混合线程（hybrid threads）</strong></p>

<p>混合线程，是内核级别线程和用户级别线程的混合体，提供了以上两种模型的优点，但带来很大的复杂性。</p></li>
</ul>


<p>另外，不得不提的是另一个模型：<strong>绿色线程</strong>。</p>

<p>绿色线程是指有虚拟机（VM）调度的线程，而不是通过内核调度，所以绿色线程是用户级别的线程。</p>

<h2>线程安全</h2>

<p>  线程安全是多线程编程里的一个概念。一片代码段，当多个线程能以一种保证安全的方式同时操纵共享的数据结构时，那么这片代码段是线程安全的。</p>

<h2>References</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Thread_(computing)">Thread</a></li>
<li><a href="http://en.wikipedia.org/wiki/Thread_safety">Thread Safety</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
