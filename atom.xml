<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JustQyx]]></title>
  <link href="http://www.justqyx.me/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:28:44+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字段加密存储-Rails]]></title>
    <link href="http://www.justqyx.me/blog/2017/11/26/keep-attribute-safe-in-rails/"/>
    <updated>2017-11-26T15:11:10+08:00</updated>
    <id>http://www.justqyx.me/blog/2017/11/26/keep-attribute-safe-in-rails</id>
    <content type="html"><![CDATA[<h2>方案</h2>

<ol>
<li>存储前，加密后再存储到数据库</li>
<li>读取后，利用 KEY 进行解密</li>
</ol>


<h2>实现</h2>

<p><a href="http://api.rubyonrails.org/v4.2.7.1/classes/ActiveSupport/MessageEncryptor.html">ActiveSupport::MessageEncryptor</a>
是 Rails 基于 openssl 封装实现的一个类，可用于对一个对象进行加密、解密操作。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">salt</span>  <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">random_bytes</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'><span class="n">key</span>   <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">KeyGenerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">generate_key</span><span class="p">(</span><span class="n">salt</span><span class="p">)</span> <span class="c1"># =&gt; &quot;\x89\xE0\x156\xAC...&quot;</span>
</span><span class='line'><span class="n">crypt</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">MessageEncryptor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>                       <span class="c1"># =&gt; #&lt;ActiveSupport::MessageEncryptor ...&gt;</span>
</span><span class='line'><span class="n">encrypted_data</span> <span class="o">=</span> <span class="n">crypt</span><span class="o">.</span><span class="n">encrypt_and_sign</span><span class="p">(</span><span class="s1">&#39;my secret data&#39;</span><span class="p">)</span>              <span class="c1"># =&gt; &quot;NlFBTTMwOUV5UlA1QlNEN2xkY2d6eThYWWh...&quot;</span>
</span><span class='line'><span class="n">crypt</span><span class="o">.</span><span class="n">decrypt_and_verify</span><span class="p">(</span><span class="n">encrypted_data</span><span class="p">)</span>                               <span class="c1"># =&gt; &quot;my secret data&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://api.rubyonrails.org/v4.2.7.1/classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize">serialize</a>
是 Rails ActiveRecord 里的一个类方法，可用于执行一个 column 如何存储到数据库，以及从数据库读取出来后要如何处理，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:preferences</span><span class="p">,</span> <span class="no">Hash</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">preferences</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">gender</span><span class="p">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save!</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，Rails 还允许自定义 Serizlizer，使得开发者能够自行决定如何做进行序列化和反序列化。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CustomerSerializer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">blank?</span> <span class="p">?</span> <span class="s2">&quot;&quot;</span> <span class="p">:</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">value</span> <span class="o">||</span> <span class="p">{})</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:preferences</span><span class="p">,</span> <span class="no">CustomerSerializer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于此，我们可以自己实现一个 serializer，使得我们能够进行对字段进行加密存储，同时读取出来时能够自行进行解密。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">blank?</span> <span class="p">?</span> <span class="s1">&#39;&#39;</span> <span class="p">:</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">encrypt</span><span class="p">(</span><span class="n">value</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">encryptor</span><span class="o">.</span><span class="n">encrypt_and_sign</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">encryptor</span><span class="o">.</span><span class="n">decrypt_and_verify</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">encryptor</span>
</span><span class='line'>    <span class="vi">@encryptor</span> <span class="o">||=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">MessageEncryptor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Settings</span><span class="o">.</span><span class="n">message_encryptor_key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserAddress</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:phone</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:country</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:state</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:city</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:address1</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:address2</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:zipcode</span><span class="p">,</span> <span class="no">EncryptedStringSerializer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以改进的点</p>

<ol>
<li>加解密用的 KEY 是否过于简单？</li>
<li>针对现有数据，如何平滑过渡？</li>
<li>多个字段需要加密时这种方式不友好</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Rubocop to Control Your Ruby Code's Quality]]></title>
    <link href="http://www.justqyx.me/blog/2017/02/19/rubocop/"/>
    <updated>2017-02-19T15:18:35+08:00</updated>
    <id>http://www.justqyx.me/blog/2017/02/19/rubocop</id>
    <content type="html"><![CDATA[<p>代码质量控制，是项目自始至终都应该去掌控的事情。
虽然每个团队的风格总会有一些出入，但是达成共识是一件并不困难的事情。
达成共识以后，我们需要借助工具，以及达成一套流程来帮助我们半自动化或自动化地做这样的一件事情。</p>

<p>在 Ruby 社区里，目前最广泛使用的是 <a href="https://github.com/bbatsov/rubocop">Rubocop</a>。</p>

<h2>Rubocop</h2>

<p>Rubocop 是一个 Ruby 静态代码分析。
其默认遵循的是一个由社区驱动的 <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>。</p>

<p><strong>优点</strong></p>

<ol>
<li>配置简单，定制化好，快速集成</li>
<li>遵循 Rails 所提倡的 COC 原则</li>
<li>兼容性好，支持 Ruby 2.0+</li>
</ol>


<p><strong>缺点</strong></p>

<ol>
<li>无法做到像编译性语言那么准确，这当然也跟 Ruby 语言本身的灵活性有关系</li>
</ol>


<h2>Rails 集成 Rubocop</h2>

<p>在 Gemfile 增加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:develop</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rubocop&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rubocop
</span></code></pre></td></tr></table></div></figure>


<h3>自定义</h3>

<p>每个团队的风格不一样，一定会有自定义的需求，只需要 Rails 项目根目录下，新建文件</p>

<p><code>.rubocop.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">AllCops</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;vendor/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;spec/fixtures/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;tmp/**/*&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">TargetRubyVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/Encoding</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">when_needed</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/FrozenStringLiteralComment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/IndentHeredoc</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">powerpack</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/BlockLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;Rakefile&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;**/*.rake&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;spec/**/*.rb&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果想要自定义，可以参考文件 <code>https://github.com/bbatsov/rubocop/blob/master/config/default.yml</code>
然后在 <code>.rubocop.yml</code> 添加即可。</p>

<h2>推荐配置</h2>

<p><code>.rubocop.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">inherit_from</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.rubocop_todo.yml</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">AllCops</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Include</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;**/Gemfile&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;**/Rakefile&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;bin/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;db/migrate/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;db/seeds.rb&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;db/schema.rb&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;vendor/bundle/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;script/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="kt">!ruby</span><span class="l-Scalar-Plain">/regexp /old_and_unused\.rb$/</span>
</span><span class='line'>  <span class="l-Scalar-Plain">TargetRubyVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.1</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Documentation</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/AsciiComments</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Style/MethodDefParentheses</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="c1"># EnforcedStyle: require_no_parentheses_except_multiline</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">require_parentheses</span>
</span><span class='line'>  <span class="c1"># SupportedStyles:</span>
</span><span class='line'>  <span class="c1">#     - require_parentheses</span>
</span><span class='line'>  <span class="c1">#     - require_no_parentheses</span>
</span><span class='line'>  <span class="c1">#     - require_no_parentheses_except_multiline</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/LineLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1200</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/ClassLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1200</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/MethodLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1200</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/ModuleLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1200</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.rubocop_todo.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># This configuration was generated by</span>
</span><span class='line'><span class="c1"># `rubocop --auto-gen-config`</span>
</span><span class='line'><span class="c1"># on 2016-04-19 10:48:45 +0800 using RuboCop version 0.39.0.</span>
</span><span class='line'><span class="c1"># The point is for the user to remove these configuration records</span>
</span><span class='line'><span class="c1"># one by one as the offenses are removed from the code base.</span>
</span><span class='line'><span class="c1"># Note that changes in the inspected code, or installation of new</span>
</span><span class='line'><span class="c1"># versions of RuboCop, may require this file to be generated again.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 25</span>
</span><span class='line'><span class="c1"># Configuration parameters: AllowHeredoc, AllowURI, URISchemes.</span>
</span><span class='line'><span class="c1"># URISchemes: http, https</span>
</span><span class='line'><span class="l-Scalar-Plain">Metrics/LineLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">120</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 5</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/AsciiComments</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;Gemfile&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 1</span>
</span><span class='line'><span class="c1"># Cop supports --auto-correct.</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/BlockComments</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;spec/spec_helper.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 3</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/Documentation</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;spec/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;test/**/*&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;app/controllers/application_controller.rb&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;app/helpers/application_helper.rb&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;config/application.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 1</span>
</span><span class='line'><span class="c1"># Cop supports --auto-correct.</span>
</span><span class='line'><span class="c1"># Configuration parameters: AllowForAlignment, ForceEqualSignAlignment.</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/ExtraSpacing</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Exclude</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;bin/setup&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 3</span>
</span><span class='line'><span class="c1"># Cop supports --auto-correct.</span>
</span><span class='line'><span class="c1"># Configuration parameters: SupportedStyles.</span>
</span><span class='line'><span class="c1"># SupportedStyles: call, braces</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/LambdaCall</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EnforcedStyle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">braces</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Offense count: 20</span>
</span><span class='line'><span class="c1"># Cop supports --auto-correct.</span>
</span><span class='line'><span class="c1"># Configuration parameters: EnforcedStyle, SupportedStyles, ConsistentQuotesInMultiline.</span>
</span><span class='line'><span class="c1"># SupportedStyles: single_quotes, double_quotes</span>
</span><span class='line'><span class="l-Scalar-Plain">Style/StringLiterals</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionCable 源码阅读笔记-前端部分-3]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-3-monitor/"/>
    <updated>2016-08-13T18:06:30+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-3-monitor</id>
    <content type="html"><![CDATA[<p><code>Cable.ConnectionMonitor</code> 通过心跳检测来确保连接处于健康的状态，如果连接出现了问题那么会重新连接而不需要，并且这对于维护来说是透明的，不需要开发人员关心。</p>

<h2>心跳检测</h2>

<p><code>Cable.Consumer</code> 的构造函数实例化了 <code>Cable.ConnectionMonitor</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">constructor: </span><span class="nf">(@url) -&gt;</span>
</span><span class='line'>    <span class="vi">@subscriptions = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Subscriptions</span> <span class="k">this</span>
</span><span class='line'>    <span class="vi">@connection = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Connection</span> <span class="k">this</span>
</span><span class='line'>    <span class="vi">@connectionMonitor = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">ConnectionMonitor</span> <span class="k">this</span>
</span></code></pre></td></tr></table></div></figure>


<p>看看 <code>Cable.ConnectionMonitor</code> 的构造函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">constructor: </span><span class="nf">(@consumer) -&gt;</span>
</span><span class='line'>    <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  <span class="c1"># 暂时忽略 </span>
</span><span class='line'>    <span class="nx">@start</span><span class="p">()</span>                           <span class="c1"># 开始心跳检测</span>
</span></code></pre></td></tr></table></div></figure>


<p>start 函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">start: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># 下面三行代码做了一些连接的准备工作</span>
</span><span class='line'>    <span class="nx">@reset</span><span class="p">()</span>
</span><span class='line'>    <span class="k">delete</span> <span class="nx">@stoppedAt</span>
</span><span class='line'>    <span class="vi">@startedAt = </span><span class="nx">now</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 开始定时往服务器发送心跳检测消息</span>
</span><span class='line'>    <span class="nx">@poll</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># 兼容 Turbolinks：页面重新载入时，重建连接</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s">&quot;visibilitychange&quot;</span><span class="p">,</span> <span class="nx">@visibilityDidChange</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>poll 函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">setTimeout</span> <span class="nf">=&gt;</span>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">@stoppedAt</span>         <span class="c1"># 如果已经连接断开，那么重建连接</span>
</span><span class='line'>        <span class="nx">@reconnectIfStale</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">@poll</span><span class="p">()</span>
</span><span class='line'><span class="p">,</span> <span class="nx">@getInterval</span><span class="p">()</span>              <span class="c1"># 随机间隔（3 ~ 30 秒）</span>
</span></code></pre></td></tr></table></div></figure>


<p>reconnectIfStale 函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># 如果连接已经过时，那么重建连接</span>
</span><span class='line'><span class="c1"># 条件是：最后发送消息的时间，或者最后 ping 的时间已经过了 6 秒</span>
</span><span class='line'><span class="c1"># class Cable.ConnectionMonitor</span>
</span><span class='line'><span class="c1">#  @pollInterval:</span>
</span><span class='line'><span class="c1">#    min: 3</span>
</span><span class='line'><span class="c1">#    max: 30</span>
</span><span class='line'><span class="c1">#  @staleThreshold: 6 # Server::Connections::BEAT_INTERVAL * 2 (missed two pings)</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="k">if</span> <span class="nx">@connectionIsStale</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@reconnectAttempts</span><span class="o">++</span>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">@disconnectedRecently</span><span class="p">()</span>
</span><span class='line'>        <span class="c1"># 调用 Cable.Connection 的实例进行连接的重建</span>
</span><span class='line'>        <span class="nx">@consumer</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">reopen</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过心跳检测来检测连接的健康情况属于主动式的检测，下面阐释基于 WebSocket 的 onclose、onerror 回调的连接重建逻辑。</p>

<h2>WebSocket 回调</h2>

<p>在上一篇里提及到在 Cable.Connection 连接的建立是通过 WebSocket 的实例化来实现，同时绑定了以下四个回调</p>

<ul>
<li>onmessage</li>
<li>onopen</li>
<li>onclose</li>
<li>onerror</li>
</ul>


<p>关键源码部分如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">installEventHandlers: </span><span class="nf">-&gt;</span>  <span class="c1"># 向 @webSocket 注入各个回调</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">eventName</span> <span class="k">of</span> <span class="nx">@events</span>
</span><span class='line'>        <span class="nv">handler = </span><span class="nx">@events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">].</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">@webSocket</span><span class="p">[</span><span class="s">&quot;on</span><span class="si">#{</span><span class="nx">eventName</span><span class="si">}</span><span class="s">&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handler</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nv">events:</span>
</span><span class='line'>    <span class="nv">message: </span><span class="nf">(event) -&gt;</span> <span class="c1"># onmessage 回调</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">identifier</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">type</span><span class="p">}</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">switch</span> <span class="nx">type</span>
</span><span class='line'>            <span class="k">when</span> <span class="nx">message_types</span><span class="p">.</span><span class="nx">confirmation</span>
</span><span class='line'>                <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="s">&quot;connected&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">when</span> <span class="nx">message_types</span><span class="p">.</span><span class="nx">rejection</span>
</span><span class='line'>                <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">identifier</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="s">&quot;received&quot;</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">open: </span><span class="nf">-&gt;</span> <span class="c1"># onopen 回调</span>
</span><span class='line'>        <span class="vi">@disconnected = </span><span class="kc">false</span>
</span><span class='line'>        <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">reload</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">close: </span><span class="nf">-&gt;</span> <span class="c1"># onclose 回调</span>
</span><span class='line'>        <span class="nx">@disconnect</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">error: </span><span class="nf">-&gt;</span> <span class="c1"># onerror 回调</span>
</span><span class='line'>        <span class="nx">@disconnect</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>disconnect 函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">disconnect: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="nx">@disconnected</span> <span class="c1"># 如果已经断开则直接返回</span>
</span><span class='line'>    <span class="vi">@disconnected = </span><span class="kc">true</span>    <span class="c1"># 标识已经断开</span>
</span><span class='line'>    <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">notifyAll</span><span class="p">(</span><span class="s">&quot;disconnected&quot;</span><span class="p">)</span> <span class="c1"># 通知所有的 subscript 已经断开</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Cable.Subscriptions</code> 里的 <code>notifyAll</code> 和 <code>notify</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">notifyAll: </span><span class="nf">(callbackName, args...) -&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">subscription</span> <span class="k">in</span> <span class="nx">@subscriptions</span>
</span><span class='line'>        <span class="c1"># 通知各个 subscription 调用各自的 disconnected 函数</span>
</span><span class='line'>        <span class="nx">@notify</span><span class="p">(</span><span class="nx">subscription</span><span class="p">,</span> <span class="nx">callbackName</span><span class="p">,</span> <span class="nx">args</span><span class="p">...)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">notify: </span><span class="nf">(subscription, callbackName, args...) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">typeof</span> <span class="nx">subscription</span> <span class="o">is</span> <span class="s">&quot;string&quot;</span>
</span><span class='line'>        <span class="nv">subscriptions = </span><span class="nx">@findAll</span><span class="p">(</span><span class="nx">subscription</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="nv">subscriptions = </span><span class="p">[</span><span class="nx">subscription</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">subscription</span> <span class="k">in</span> <span class="nx">subscriptions</span>
</span><span class='line'>        <span class="c1"># subscription 调用 disconnected 函数</span>
</span><span class='line'>        <span class="c1">#   subscription[callbackName]?(args...) 的意思是</span>
</span><span class='line'>        <span class="c1">#   subscription = subscriptions[i];</span>
</span><span class='line'>        <span class="c1">#   if (typeof subscription[callbackName] === &quot;function&quot;) {</span>
</span><span class='line'>        <span class="c1">#       subscription[callbackName].apply(subscription, args);</span>
</span><span class='line'>        <span class="c1">#   }</span>
</span><span class='line'>        <span class="nx">subscription</span><span class="p">[</span><span class="nx">callbackName</span><span class="p">]</span><span class="o">?</span><span class="p">(</span><span class="nx">args</span><span class="p">...)</span>
</span><span class='line'>        <span class="c1"># 以下先不理会，否则会脱离内容的主线</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">callbackName</span> <span class="k">in</span> <span class="p">[</span><span class="s">&quot;initialized&quot;</span><span class="p">,</span> <span class="s">&quot;connected&quot;</span><span class="p">,</span> <span class="s">&quot;disconnected&quot;</span><span class="p">,</span> <span class="s">&quot;rejected&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="p">{</span><span class="nx">identifier</span><span class="p">}</span> <span class="o">=</span> <span class="nx">subscription</span>
</span><span class='line'>            <span class="nx">@record</span><span class="p">(</span><span class="nv">notification: </span><span class="p">{</span><span class="nx">identifier</span><span class="p">,</span> <span class="nx">callbackName</span><span class="p">,</span> <span class="nx">args</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，回去看 <code>Cable.ConnectionMonitor</code> 的 <code>disconnected</code> 函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">disconnected: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="vi">@disconnectedAt = </span><span class="nx">now</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，心跳检测时就会发现连接已断开，就会重建连接，相关代码如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">poll: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">setTimeout</span> <span class="nf">=&gt;</span>
</span><span class='line'>        <span class="k">unless</span> <span class="nx">@stoppedAt</span>
</span><span class='line'>            <span class="nx">@reconnectIfStale</span><span class="p">()</span>
</span><span class='line'>            <span class="nx">@poll</span><span class="p">()</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">@getInterval</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">reconnectIfStale: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@connectionIsStale</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">@reconnectAttempts</span><span class="o">++</span>
</span><span class='line'>        <span class="k">unless</span> <span class="nx">@disconnectedRecently</span><span class="p">()</span>
</span><span class='line'>            <span class="nx">@consumer</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">reopen</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">connectionIsStale: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">secondsSince</span><span class="p">(</span><span class="nx">@pingedAt</span> <span class="o">?</span> <span class="nx">@startedAt</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">@constructor</span><span class="p">.</span><span class="nx">staleThreshold</span>
</span><span class='line'>
</span><span class='line'><span class="nv">disconnectedRecently: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@disconnectedAt</span> <span class="o">and</span> <span class="nx">secondsSince</span><span class="p">(</span><span class="nx">@disconnectedAt</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nx">@constructor</span><span class="p">.</span><span class="nx">staleThreshold</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>连接的监控也简单，通过自主的心跳检测，以及 <code>WebSocket</code> 的 <code>onerror</code>、<code>onclose</code> 回调来自动地重建连接，因此使用者可以不需要去关心当前的连接是否正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionCable 源码阅读笔记-前端部分-2]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-2-connection/"/>
    <updated>2016-08-13T17:48:30+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-2-connection</id>
    <content type="html"><![CDATA[<p>本节将会阐述 ActionCable 浏览器端是如何建立连接、以及收发消息的。</p>

<h2>Cable.Consumer</h2>

<p>Cable.Consumer 维护了下面三个类的实例对象</p>

<p>1、 Cable.Subscriptions</p>

<blockquote><p>维护多个 subscription，是消息的发布者和消费者。</p></blockquote>

<p>2、 Cable.Connection</p>

<blockquote><p>维护与服务端的连接，给 subscription 提供基础的服务。</p></blockquote>

<p>3、 Cable.ConnectionMonitor</p>

<blockquote><p>用来监控连接的健康状态。</p></blockquote>

<p><strong>具体源码如下</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Consumer</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@url) -&gt;</span>
</span><span class='line'>    <span class="vi">@subscriptions = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Subscriptions</span> <span class="k">this</span>
</span><span class='line'>    <span class="vi">@connection = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Connection</span> <span class="k">this</span>
</span><span class='line'>    <span class="vi">@connectionMonitor = </span><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">ConnectionMonitor</span> <span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">send: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nx">@connection</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">inspect: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">toJSON: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">@url</span><span class="p">,</span> <span class="nx">@subscriptions</span><span class="p">,</span> <span class="nx">@connection</span><span class="p">,</span> <span class="nx">@connectionMonitor</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>架构</strong></p>

<p><img src="http://www.justqyx.me/downloads/images/actioncable_frontend_arch.png"></p>

<h2>建立 WebSocket 连接</h2>

<p>创建一个 Connection 实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">new</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">Connection</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用构造方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">constructor: </span><span class="nf">(@consumer) -&gt;</span>
</span><span class='line'>    <span class="nx">@open</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开 <code>WebSocket</code> 连接</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">open: </span><span class="nf">=&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@webSocket</span> <span class="o">and</span> <span class="o">not</span> <span class="nx">@isState</span><span class="p">(</span><span class="s">&#39;closed&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s">&#39;Existing connection must be closed before opening&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="vi">@webSocket = </span><span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="nx">@consumer</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">@installEventHandlers</span><span class="p">()</span>
</span><span class='line'>        <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>注册事件处理器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">installEventHandlers: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">for</span> <span class="nx">eventName</span> <span class="k">of</span> <span class="nx">@events</span>
</span><span class='line'>        <span class="nv">handler = </span><span class="nx">@events</span><span class="p">[</span><span class="nx">eventName</span><span class="p">].</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">@webSocket</span><span class="p">[</span><span class="s">&quot;on</span><span class="si">#{</span><span class="nx">eventName</span><span class="si">}</span><span class="s">&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handler</span>
</span><span class='line'>    <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来看看 <code>@events</code> 究竟是哪些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">events:</span>
</span><span class='line'>    <span class="nv">message: </span><span class="nf">(event) -&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">identifier</span><span class="p">,</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">type</span><span class="p">}</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="nx">type</span>
</span><span class='line'>        <span class="k">when</span> <span class="nx">message_types</span><span class="p">.</span><span class="nx">confirmation</span>
</span><span class='line'>          <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="s">&quot;connected&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">when</span> <span class="nx">message_types</span><span class="p">.</span><span class="nx">rejection</span>
</span><span class='line'>          <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">identifier</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="s">&quot;received&quot;</span><span class="p">,</span> <span class="nx">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">open: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="vi">@disconnected = </span><span class="kc">false</span>
</span><span class='line'>      <span class="nx">@consumer</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">reload</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">close: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">@disconnect</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">error: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">@disconnect</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的源码可以看到，最后 <code>@webSocket</code> 注册的事件回调有</p>

<pre><code>onmessage
onopen
onclose
onerror
</code></pre>

<p>这些回调，本身就是浏览器 <code>WebSocket</code> 实例对象所提供的，<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Attributes">可以从这里查询到</a>。</p>

<h2>发送消息</h2>

<p>从上一篇的例子可以知道，通过 <code>@perform('appear', { message: "Hello, John" })</code> 可以发送消息到服务器并调用服务器相应的 <code>AppearanceChannel</code> 类的实例对象的 <code>appear</code> 方法。</p>

<p>所以我们来看看 <code>Cable.Subscription</code> 相关的函数体</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">perform: </span><span class="nf">(action, data = {}) -&gt;</span>
</span><span class='line'>    <span class="nv">data.action = </span><span class="nx">action</span>
</span><span class='line'>    <span class="nx">@send</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">send: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nx">@consumer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nv">command: </span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="nv">identifier: </span><span class="nx">@identifier</span><span class="p">,</span> <span class="nv">data: </span>  <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>继续看 Cable.Consumer 里的 <code>send</code> 函数体</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">send: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nx">@connection</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以它是通过 <code>Cable.Connection</code> 的实例对象 <code>@connection</code> 来发送数据的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">send: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@isOpen</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">@webSocket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>        <span class="kc">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此已经结束，通过浏览器 <code>WebSocket</code> 实例对象的 <code>send</code> 方法来发送消息到服务端。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionCable 源码阅读笔记-前端部分-1]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-1-hello/"/>
    <updated>2016-08-13T17:37:26+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/13/actioncable-sourcecode-frontend-part-1-hello</id>
    <content type="html"><![CDATA[<p>本节将会简单阐述如何使用 ActionCable 收发消息，着重前端部分。</p>

<h2>Cable.Consumer</h2>

<p><strong>基本概念</strong></p>

<p>负责建立到服务端的连接。
在连接建立之后，<code>Cable.ConnectionMonitor</code> 会通过心跳检测来确保连接的状态。
Consumer 实例对象通过 <code>createSubscription</code> 方法来建立一个连接到特定频道的订阅。</p>

<p><strong>例子</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">App</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">cable</span> <span class="o">=</span> <span class="nx">Cable</span><span class="p">.</span><span class="nx">createConsumer</span><span class="p">(</span><span class="s1">&#39;ws://example.com/accounts/1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">appearance</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">cable</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;AppearanceChannel&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以通过 <code>App.appearance</code> 来发送消息到服务器，同样其也可以接收来自服务器的消息。</p>

<h2>Cable.Subscription</h2>

<p>对应着服务端的 Channel 实例，通过提供 <code>callbacks</code>、<code>methods</code> 来实现远程过程调用（RPC, Remote Procedure Calls）。</p>

<p>如果你在浏览器创建了一个 <code>AppearanceChannel</code> 的 <code>subcription</code>，那么 <code>subscription</code> 的调用将会直接等同于调用服务端的 <code>AppearanceChannel</code> 示例里相应的方法。</p>

<p><strong>例子</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">//</span> <span class="err">前端</span>
</span><span class='line'><span class="nv">App.appearance = </span><span class="nx">App</span><span class="p">.</span><span class="nx">cable</span><span class="p">.</span><span class="nx">subscription</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s">&#39;AppearanceChannel&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">connected: </span><span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s">&quot;连接已经建立好啦&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">received: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s">&quot;接收到了来自服务端的消息&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">appear: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">perform</span><span class="p">(</span><span class="s">&#39;appear&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 服务端代码</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AppearanceChannel</span> <span class="o">&lt;</span> <span class="no">ApplicationCable</span><span class="o">::</span><span class="no">Channel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">subscribed</span>
</span><span class='line'>    <span class="n">stop_all_streams</span>
</span><span class='line'>    <span class="n">stream_from</span> <span class="s1">&#39;appearance_channel&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">unsubscribed</span>
</span><span class='line'>    <span class="n">stop_all_streams</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">appear</span> <span class="n">data</span>
</span><span class='line'>    <span class="c1"># do something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面中，如果你这么使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">appearance</span><span class="p">.</span><span class="nx">appear</span><span class="p">({</span> <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hello, John&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么对应着服务端，<code>appear</code> 方法将会调用，并且你可以用过 <code>ActionCable.server.broadcast('appearance_channel', message: 'Hello, Katy')</code> 来响应，这样浏览器端的 <code>received</code> 回调将会被调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/13/fast/"/>
    <updated>2016-08-13T14:17:52+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/13/fast</id>
    <content type="html"><![CDATA[<p>从开始接触以项目式的程序开发至今，总有这种的一种声音或者原则在驱动着做事：先解决问题。</p>

<p>不懂什么是 WEB，  没关系，先按葫芦画瓢做一个网页<br/>
不懂什么是 MVC，  没关系，先按葫芦画瓢做一个网页<br/>
不懂什么是 AJAX， 没关系，先按葫芦画瓢做一个数据提交和响应<br/>
不懂怎么写 SQL，  没关系，用 Rails 的 ActiveRecord<br/>
不懂什么是 Linux，没关系，先学会这几句命令<br/></p>

<p>几乎所有的东西都不懂，也就需要花越多的时间尝试，先解决问题的方式诚然在初期效果很明显。<br/>
但随着时间的流逝，我越来越困惑，是巨大的困惑。<br/></p>

<p>二十几岁的我，最大的困惑就是不知道自己人生的答案，想做什么、该做什么等等。<br/>
技术上，很多都仅仅是懂一点点，对比他人突然发现自己的学习能力相当差，不具备系统性学习以及实践某一知识领域的能力。</p>

<p>发现后者这一点后，我一直沮丧到现在，因为仍然没有任何本质上的改变。<br/>
在这个过程中，我全盘否定了自己的过去，充满着无力感。<br/>
没有特长、没有喜欢的事物、没有背景又没有学习能力、没有激情。<br/></p>

<p>做程序开发，我谈不上喜欢，也谈不上讨厌，这通常等价于平庸。但有时候会出现一些意外的瞬间</p>

<ul>
<li>有时候解决了一些问题，非常开心</li>
<li>有个 nice 的上司，想更加努力获得他的认可</li>
<li>看到有些有趣的东西，会想要动手试试，虽然几乎所有情况是到了最后什么也没做</li>
</ul>


<p>现在的我想慢下来，把 60 分提高到 61 分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate a Self-signed CA Certificate]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/05/use-openssl-to-generate-a-self-signed-ca/"/>
    <updated>2016-08-05T23:59:59+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/05/use-openssl-to-generate-a-self-signed-ca</id>
    <content type="html"><![CDATA[<h2>生成根证书</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p <span class="nb">test</span>/demoCA <span class="o">&amp;&amp;</span> <span class="nb">cd test</span>/demoCA
</span><span class='line'>mkdir certs crl newcerts private
</span><span class='line'>chmod <span class="m">700</span> private
</span><span class='line'>touch index.txt
</span><span class='line'><span class="nb">echo </span><span class="m">1000</span> &gt; serial
</span><span class='line'>vim openssl.cnf
</span><span class='line'>
</span><span class='line'>openssl genrsa -aes256 -out private/ca.key.pem 4096
</span><span class='line'>chmod <span class="m">400</span> private/ca.key.pem
</span><span class='line'>
</span><span class='line'>openssl req -config openssl.cnf <span class="se">\</span>
</span><span class='line'>        -key private/ca.key.pem <span class="se">\</span>
</span><span class='line'>        -new -x509 -days <span class="m">7300</span> -sha256 -extensions v3_ca <span class="se">\</span>
</span><span class='line'>        -out certs/ca.cert.pem
</span></code></pre></td></tr></table></div></figure>


<p><strong>验证</strong></p>

<pre><code>openssl x509 -noout -text -in certs/ca.cert.pem
</code></pre>

<h2>生成服务器证书，并用根证书签名</h2>

<p>1、生成服务器私钥</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd test</span>
</span><span class='line'>openssl genrsa -aes256 -out server.key 2048
</span><span class='line'>openssl rsa -in server.key -out server.key
</span></code></pre></td></tr></table></div></figure>


<p>2、生成服务器请求证书</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl req -new -key server.key -out server.csr
</span></code></pre></td></tr></table></div></figure>


<p>3、用 CA 证书给服务器请求证书签名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl ca -config ./demoCA/openssl.cnf <span class="se">\</span>
</span><span class='line'>           -in server.csr -out server.crt <span class="se">\</span>
</span><span class='line'>           -cert ./demoCA/certs/ca.cert.pem <span class="se">\</span>
</span><span class='line'>           -keyfile ./demoCA/private/ca.key.pem <span class="se">\</span>
</span><span class='line'>           -startdate 100707000000Z <span class="se">\</span>
</span><span class='line'>           -enddate 300707000000Z
</span></code></pre></td></tr></table></div></figure>


<p>输入之后会要求你输入一些信息，其中最为重要的便是 <code>Server Name</code> 这个必须与域名一直，否则即使设置了信任，浏览器仍然会提示证书有问题。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Country Name <span class="o">(</span><span class="m">2</span> letter code<span class="o">)</span> <span class="o">[</span>AU<span class="o">]</span>:CN
</span><span class='line'>State or Province Name <span class="o">(</span>full name<span class="o">)</span> <span class="o">[</span>Some-State<span class="o">]</span>:Guangdong
</span><span class='line'>Locality Name <span class="o">(</span>eg, city<span class="o">)</span> <span class="o">[]</span>:Shenzhen
</span><span class='line'>Organization Name <span class="o">(</span>eg, company<span class="o">)</span> <span class="o">[</span>Internet Widgits Pty Ltd<span class="o">]</span>:随便填
</span><span class='line'>Organizational Unit Name <span class="o">(</span>eg, section<span class="o">)</span> <span class="o">[]</span>:随便填
</span><span class='line'>Common Name <span class="o">(</span>e.g. server FQDN or YOUR name<span class="o">)</span> <span class="o">[]</span>:localhost（这里一定要是你要签的域名）
</span><span class='line'>Email Address <span class="o">[]</span>:hzuqiuyuanxin@gmail.com
</span></code></pre></td></tr></table></div></figure>


<h2>DEMO</h2>

<p>拿到上面的根证书 <code>ca.cert.pem</code>，导入浏览器并设置为信任，然后取得 <code>server.crt</code> 以及 <code>server.key</code> 放到某个位置，
是的 nginx 可以读取到，nginx 配置例子如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   server <span class="o">{</span>
</span><span class='line'>        listen 443<span class="p">;</span>
</span><span class='line'>        server_name localhost<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        ssl                   on<span class="p">;</span>
</span><span class='line'>        ssl_certificate       /usr/local/etc/nginx/ca/server.crt<span class="p">;</span>
</span><span class='line'>        ssl_certificate_key   /usr/local/etc/nginx/ca/server.key<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        ssl_session_timeout   5m<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        location / <span class="o">{</span>
</span><span class='line'>            root /Users/yuanxin/www<span class="p">;</span>
</span><span class='line'>            index index.html index.htm<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>检查 nginx 的语法，如果没有问题则 reload 配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nginx -t
</span><span class='line'>sudo nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器访问：<code>https://localhost</code></p>

<h2>参考</h2>

<ul>
<li><a href="https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html">Create the root pair</a></li>
<li><a href="http://walkerqt.blog.51cto.com/1310630/946122">OpenSSL证书生成(Windows环境)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run MySQL on Docker Machine]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/05/docker-run-mysql-and-connect/"/>
    <updated>2016-08-05T23:59:58+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/05/docker-run-mysql-and-connect</id>
    <content type="html"><![CDATA[<h2>使用 docker 来运行 MySQL</h2>

<p>把 Docker Container 的 3306 端口映射到宿主机的端口 3306，这样我们的计算机就可以连接到虚拟机里的 3006 端口，
从而能够连接到 Docker Container 里的 MySQL 服务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name demo \
</span><span class='line'>           -p 3306:3306 \
</span><span class='line'>           -e MYSQL_ROOT_PASSWORD=root
</span><span class='line'>           -d mysql:5.6.27 \
</span><span class='line'>           --character-set-server=utf8mb4 \
</span><span class='line'>           --collation-server=utf8mb4_unicode_ci</span></code></pre></td></tr></table></div></figure>


<p>连接到该 MySQL 服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -h 192.168.99.100 -u root -p</span></code></pre></td></tr></table></div></figure>


<p>相关的日志</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  ~ mysql -h 192.168.99.100 -u root -p
</span><span class='line'>Enter password:
</span><span class='line'>Welcome to the MySQL monitor.  Commands end with ; or \g.
</span><span class='line'>Your MySQL connection id is 1
</span><span class='line'>Server version: 5.6.27 MySQL Community Server (GPL)
</span><span class='line'>
</span><span class='line'>Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
</span><span class='line'>
</span><span class='line'>Oracle is a registered trademark of Oracle Corporation and/or its
</span><span class='line'>affiliates. Other names may be trademarks of their respective
</span><span class='line'>owners.
</span><span class='line'>
</span><span class='line'>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
</span><span class='line'>
</span><span class='line'>mysql&gt; show databases;
</span><span class='line'>+--------------------+
</span><span class='line'>| Database           |
</span><span class='line'>+--------------------+
</span><span class='line'>| information_schema |
</span><span class='line'>| mysql              |
</span><span class='line'>| performance_schema |
</span><span class='line'>+--------------------+
</span><span class='line'>3 rows in set (0.01 sec)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Heartbeats Logs in Rails]]></title>
    <link href="http://www.justqyx.me/blog/2016/06/04/disable-heartbeats-logs-in-rails/"/>
    <updated>2016-06-04T13:15:18+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/06/04/disable-heartbeats-logs-in-rails</id>
    <content type="html"><![CDATA[<p>为了监测我们的 Rails 应用是否存活，我们在应用里会提供一个接口，让监控服务调用。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;/heartbeats&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Context-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;&#39;</span><span class="o">]]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样日志里就会有这样的文本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Started</span> <span class="no">GET</span> <span class="s2">&quot;/heartbeats&quot;</span> <span class="k">for</span> <span class="o">::</span><span class="mi">1</span> <span class="n">at</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mo">04</span> <span class="mi">13</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">14</span> <span class="o">+</span><span class="mi">0800</span>
</span></code></pre></td></tr></table></div></figure>


<p>但因为监控服务会每秒调用一次，所以日志就会不断地打印出来，并且这些日志其实没有任何作用，因为部署到线上后，nginx 的日志同样也会有一份，所以我就在想能不能把它去掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/quiet_heartbeats.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">QuietHeartbeats</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Railtie</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">Rails</span><span class="o">::</span><span class="no">Railtie</span>
</span><span class='line'>    <span class="n">initializer</span> <span class="s1">&#39;quiet_heartbeat.initialize&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>      <span class="no">PATH_PREFIX_REGEX</span> <span class="o">=</span> <span class="sr">/\A(\/heartbeats)/</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">::</span><span class="no">Rack</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call_with_quiet_heartbeat_request</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span> <span class="o">=~</span> <span class="no">PATH_PREFIX_REGEX</span>
</span><span class='line'>            <span class="n">previous_level</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">level</span>
</span><span class='line'>            <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'>            <span class="n">call_without_quiet_heartbeat_request</span><span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span>
</span><span class='line'>              <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">previous_level</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">call_without_quiet_heartbeat_request</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:call</span><span class="p">,</span> <span class="ss">:quiet_heartbeat_request</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 <code>config/application.rb</code> 载入这段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">YourApplicationName</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;quiet_heartbeats&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done.</p>

<hr />

<p><strong>2016-06-21 更新</strong></p>

<p>上面那段代码，在生产环境跑仍然会有问题，这里提供使用 middleware 的方式解决</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/quiet_heartbeats_middleware.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">QuietHeartbeatsMiddleware</span>
</span><span class='line'>  <span class="no">PATH_PREFIX_REGEX</span> <span class="o">=</span> <span class="sr">/\A(\/heartbeats)/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span> <span class="o">=~</span> <span class="no">PATH_PREFIX_REGEX</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;Context-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/plain&#39;</span> <span class="p">},</span> <span class="o">[</span><span class="s1">&#39;&#39;</span><span class="o">]]</span>
</span><span class='line'>      <span class="c1"># 如果你仅仅只是想不打印 log，那么可以这样写</span>
</span><span class='line'>      <span class="c1"># Rails.logger.silence do</span>
</span><span class='line'>      <span class="c1">#   @app.call(env)</span>
</span><span class='line'>      <span class="c1"># end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在 <code>config/application.rb</code> 初始化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Your_App</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="no">Rails</span><span class="o">::</span><span class="no">Application</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;quiet_heartbeats_middleware&#39;</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">insert_before</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Lock</span><span class="p">,</span> <span class="no">QuietHeartbeatsMiddleware</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 启用 HTTPS]]></title>
    <link href="http://www.justqyx.me/blog/2016/05/08/enable-https-in-nginx/"/>
    <updated>2016-05-08T17:01:17+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/05/08/enable-https-in-nginx</id>
    <content type="html"><![CDATA[<p>维基百科关于 HTTPS 的介绍 <br/>
<a href="https://en.wikipedia.org/wiki/HTTPS">https://en.wikipedia.org/wiki/HTTPS</a></p>

<h2>服务器设置的步骤</h2>

<ol>
<li>管理员创建 <code>数字证书</code></li>
<li>交由 <code>证书颁发机构</code> 签名</li>
<li>nginx 配置</li>
</ol>


<p>浏览器通常都安装了证书颁发机构的证书，所以他们可以验证该签名。<br/>
所以如果你自己创建了一个证书颁发机构，你得让浏览器安装你自己常见的证书颁发机构的证书。</p>

<h2>创建数字证书</h2>

<p>首先需要安装好 openssl，这里不做介绍</p>

<p>1、Generate a 2048bit RSA private key and save it to a file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl genrsa -out server.key 2048
</span></code></pre></td></tr></table></div></figure>


<p>2、Generate a certificate signing request to be sent to a certificate authority</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl req -new -sha256 -key server.key -out server.csr
</span></code></pre></td></tr></table></div></figure>


<h2>对服务器证书进行签名</h2>

<p>由于这里是测试，所以我们创建一个自签名（self-signed）的数字证书。</p>

<p>Generate a self-signed certificate from a certificate signing request valid for some number of days:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl x509 -req -days <span class="m">365</span> -in server.csr -signkey server.key -out server.crt
</span></code></pre></td></tr></table></div></figure>


<p>最后，将生成的 <code>server.crt</code> 在浏览器端设置为信任即可。</p>

<h2>nginx 配置</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen 443<span class="p">;</span>
</span><span class='line'>    server_name https.example.com<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    ssl                   on<span class="p">;</span>
</span><span class='line'>    ssl_certificate       /opt/www/https-example/server.crt<span class="p">;</span>
</span><span class='line'>    ssl_certificate_key   /opt/www/https-example/server.key<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    ssl_session_timeout   5m<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location / <span class="o">{</span>
</span><span class='line'>        root /opt/www/https-example<span class="p">;</span>
</span><span class='line'>        index index.html index.htm<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重启 nginx</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ubuntu</span>
</span><span class='line'>sudo service nginx -s reload
</span><span class='line'>
</span><span class='line'><span class="c"># Mac OSX</span>
</span><span class='line'>sudo nginx -s reload
</span></code></pre></td></tr></table></div></figure>


<p>打开浏览器，访问</p>

<pre><code>https://https.example.com
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do I Collect Tech Infomation]]></title>
    <link href="http://www.justqyx.me/blog/2016/03/04/how-do-i-collect-tech-infomation/"/>
    <updated>2016-03-04T10:55:14+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/03/04/how-do-i-collect-tech-infomation</id>
    <content type="html"><![CDATA[<p>作为一个「图样图森破」的人，向前辈学习是我的主旋律，以下是我获取信息和知识的主要渠道。</p>

<h2>微信公众号</h2>

<p>关注一些冯大辉、池建强、三表龙门阵、李笑来、吴晓波频道、caozsay等公号，常能够获取到一些有趣的东西。</p>

<h2>微博 &amp;&amp; twitter</h2>

<p>国内外的牛人或是技术达人，都常年活跃在微博和 twitter，关注他们日常所关注的，适当地选择一些点作为自己进步的方向标，不断地思考和修正自己的方向。</p>

<p>同时有名的开源项目在 twitter 都有官方账号，可以在那里获得最新相关的资讯。</p>

<p>社交网站能够让我对最新的技术或者一些大事件保持敏感，同时使用 Pocket 保存一些觉得有用的网页并打上标签分类，不时地拿出来翻翻。</p>

<h2>播客</h2>

<p>IPN 旗下的节目都不错，另外作为一个 Rubist 也应该订阅 Teahour。</p>

<h2>博客</h2>

<p>自从 Google Reader 关闭之后，我开始使用 Feedly 订阅一些好的博客，内容一般是日常开发中遇到的问题以及相应的解决方案。</p>

<h2>书籍</h2>

<p>真正的干货，永远只存在于好的书籍里，推荐《如何阅读一本书》，它可以指导你如何阅读一本书，同时也指导你如何去选一本好书。</p>

<p>好的书籍则能够让你更加脚踏实地地进步，它相当于这本书的作者在非常认真地跟你讲 ta 在这个领域所掌握的知识，这是花多少钱都买不来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby App Server 常用的三种 I/O 模型]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/17/ruby-app-server/"/>
    <updated>2016-02-17T11:06:27+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/17/ruby-app-server</id>
    <content type="html"><![CDATA[<p>所有的 Web 应用都遵循着一个基本模型。首先，它们需要从一些 I/O 通道接收 HTTP 请求，
然后处理这些请求，最后输出 HTTP 响应体，这个响应体将会被发送回 HTTP 客户端。
这个 HTTP 客户端通常是 Web 浏览器，又或者是一些像 curl 这一类的工具，又或者是搜索引擎的爬虫。</p>

<h2>Ruby app server</h2>

<p>Ruby app server 其实就是 HTTP Server，能与 HTTP client 直接进行对话的服务。<br/>
Ruby 里常见的 app server 的有 thin、Unicorn、Puma、Passenger。</p>

<h2>Ruby web app</h2>

<p>Ruby web app 是基于像 Rails、Sinatra 这一类框架所构建出来的应用，它并不直接与 HTTP 打交道。</p>

<p>如果 Ruby web app 直接与 HTTP 请求打交道的话，那么每一个 Ruby Web app 都需要实现与 HTTP 打交道，
所以为了简化这一过程，Ruby web app 只需要与一个被抽象过的 HTTP 请求和响应打交道，在 Ruby 生态里，最流行的便是 Rack。</p>

<p>Unicorn、Puma 和 Passenger 这一类的 app server 实现了 Rack 接口，因此 Ruby web app 能够和 Ruby app server
进行无缝对接。</p>

<p><img src="http://www.justqyx.me/downloads/images/rack.png"></p>

<p>理解完 Ruby app server 和 Ruby web app 的概念后，让我们来看看常见的三种连接处理和 I/O 模型（Connection handling and I/O models）。</p>

<h2>Multi-process blocking I/O</h2>

<p><img src="http://www.justqyx.me/downloads/images/multi-process-io.png"></p>

<p>一个进程每次只处理一个客户端（的请求），通过多进程的方式来实现并发。</p>

<p>读操作会被阻塞如果另一端没有发送任何数据，同样写操作也会被阻塞如果另一端接收数据太慢。
因为这样的特性，所以一个进程每次只能处理一个客户端（的请求）。
想要处理多少个客户端（的请求），就需要多少个进程。</p>

<p>这是一种传统的 I/O 模型，被 Unicorn 和 <a href="http://httpd.apache.org/docs/current/mod/prefork.html">Apache with the prefork NPM</a> 所采用。</p>

<p><strong>优点</strong></p>

<ul>
<li>使用非常简单</li>
<li>线程安全</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>进程开销大</li>
<li>I/O 阻塞导致吞吐量低</li>
</ul>


<h2>Multi-threaded blocking I/O</h2>

<p><img src="http://www.justqyx.me/downloads/images/multithreaded-io.png"></p>

<p>I/O 调用仍然会阻塞，但通过创建线程来替代进程。
一个进程可以有许多线程，每一个线程一次处理一个客户端（的请求）。
因为线程是轻量级的，你可以使用更少的内存处理同样数量的的 I/O 并发。
要服务 5000 个 websocket 客户端，你总共需要 5000 个线程，假设你在一个台8核的机器上运行了
8 个应用进程，那么每个进程需要配置 625 个线程，这对于 Ruby 和 OS 来说是非常容易的。
一个进程可能需要 1GB 或者更少的内存，这样对于 8 个进程来说需要 8GB 的内存，
比起多进程阻塞 I/O 模型来说的 1.2TB 来说是非常小的。</p>

<p>这个 I/O 模型被 Torquebox 和 <a href="http://httpd.apache.org/docs/current/mod/worker.html">Apache with the worker MPM</a> 所使用。
也是 Puma 经常使用的模型之一，Puma 采用了一种带限制的混合策略。</p>

<p><strong>优点</strong></p>

<ul>
<li>对于类似 <a href="https://en.wikipedia.org/wiki/Embarrassingly_parallel">embarassingly parallel</a> 的工作负载，
比如 web 请求，使用线程来处理客户端 I/O 还是非常容易的。</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>应用程序所有的代码和依赖的库必须是线程安全的</li>
<li>应用服务必须被反向代理保护，原因和多进程 I/O 模型一样，相比较而言，虽然多线程的应用服务不太容易受 slow client 影响，
但是也并没有完全解决 slow client 的问题</li>
</ul>


<h2>Evented I/O</h2>

<p><img src="http://www.justqyx.me/downloads/images/event-io.png"></p>

<p>在这种模型里，I/O 调用完全不会被阻塞。
当另一端没有发送数据，或者接收数据太慢，I/O 调用只是返回一个特定的错误。
应用程序有一个持续监听并响应 I/O 事件的事件循环，当没有事件时，该循环会进入睡眠状态。</p>

<p>这是目前最为怪异（weirdest）和难以编写的一种 I/O 模型。
它需要与前面两种模型完全不同的方法，当多进程阻塞 I/O 模型的代码非常容易转换成为多线程阻塞 I/O 模型的代码，
但是如果使用 Evented I/O 模型的话，通常情况下代码需要重写。使用 Evented I/O 模型的程序需要特定的设计。</p>

<p>这样的 I/O 模型被 Nignx、Nodejs 和 Thin 所采用，同时它也被 Puma 部分采用以限制 slow client 达到保护的目的。</p>

<p><strong>优点</strong></p>

<ul>
<li>使用这个模型你可以仅仅使用一个进程和一个线程便可以处理无限量的 I/O 并发，同时资源使用也非常少。
虽然多线程已经能够处理非常多的 I/O 并发，但 Evented I/O 还要多得多。</li>
<li>采用该模型的服务器，对 slow client 是免疫的（immune），所以可以不需要一个缓冲反向代理。</li>
</ul>


<p><strong>缺点</strong></p>

<ul>
<li>相比于阻塞型 I/O 模型，事件模型要难掌握地多，并且需要你时刻记住应用代码和库要适配该模型。</li>
</ul>


<h2>经验</h2>

<p>Nginx + Unicorn 是一个不错的选择，并且 Unicorn 支持 hot restart，部署过程对用户的使用影响较小。</p>

<p>如果遇到 websocket 这一类的需求，那么 Puma (support hot restart) 单独部署这需求相关的功能是不错的。</p>

<p>如果遇到高 I/O 的场景，如消息群发通知，那么使用 Node来实现与外部服务交互，性能是比较理想的。相信 Rubist 都会 Node。</p>

<h2>Ref</h2>

<ul>
<li><a href="http://www.rubyraptor.org/how-we-made-raptor-up-to-4x-faster-than-unicorn-and-up-to-2x-faster-than-puma-torquebox">How we made raptor up to 4x faster than unicorn and up to 2x faster than puma torquebox</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年要读的书]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/16/books-reading-this-year/"/>
    <updated>2016-02-16T14:37:35+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/16/books-reading-this-year</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>得益于如今的互联网和技术圈的氛围，使得我可以不断地修正自己的方向。</p>

<h2>List</h2>

<ul>
<li><strong>《批判性思维：带你走出思维的误区》</strong></li>
</ul>


<blockquote><p>出生在农村的我，先天教育的落后，导致我智商、情商都落后，加上信息透明度不够，<br/>
在这社会行走，太容易被人忽悠。<br/>
人傻要多读书，人傻要多读书，人傻要多读书。</p></blockquote>

<ul>
<li><strong>《垃圾回收的算法与实现》</strong></li>
</ul>


<blockquote><p>今年将要出版的一本书，<a href="https://twitter.com/_kaichen">@陈恺</a>师兄介绍，他正在帮忙审查这本书。<br/>
Ruby 的 GC 话题在 2014 和 2015 年都非常火，最新几个版本的重点也都在于对虚拟机性能的提升。</p></blockquote>

<ul>
<li><strong>《HTTP 权威指南》</strong></li>
<li><strong>《Webkit 技术内幕》</strong></li>
<li><strong>《白帽子讲 Web 安全》</strong></li>
</ul>


<blockquote><p>与其在网上看一堆文章（特别是百度搜出来的），还不如静下心来看看书，这才是精华。<br/>
另外，我只用谷歌，最差也是 global.bing.com。</p></blockquote>

<ul>
<li><strong>《领域特定语言》</strong></li>
<li><strong>《企业应用架构模式》</strong></li>
</ul>


<blockquote><p>这两年或多或少接触这些领域的概念，但一直没有迈开脚步，有许多原因，现在就先迈出一步吧。<br/>
工程化，是我接下来需要修习的一门课。</p></blockquote>

<ul>
<li><strong>《写给大家看的设计书》</strong></li>
</ul>


<blockquote><p>我讨厌不好看的 UI，就跟我用了 Mac 之后再也回不去 Windows 一样。<br/>
另外这篇扯淡博文，我调了四五次格式，但还是丑 &hellip;</p></blockquote>

<ul>
<li><strong>《创业维艰》</strong></li>
<li><strong>《从0到1：开启商业与未来的秘密》</strong></li>
</ul>


<blockquote><p>某一天，我也希望有自己的工作室或者公司，当老板的都是苦逼的，能不苦逼的，干的都是写在宪法里的事情。</p></blockquote>

<ul>
<li><strong>《激荡三十年（上）》</strong></li>
<li><strong>《激荡三十年（上）》</strong></li>
<li><strong>《货币战争：真相与未来》</strong></li>
</ul>


<blockquote><p>没错，我对财经也感兴趣。<br/>
前两本是前老板写的，没错，就是那个财经界的吴晓波，据说有一段时间，杭州武林门有一条街都是他的。<br/>
最后一本也许是个坑，还有也许三本都是坑。</p></blockquote>

<ul>
<li><strong>《失控》</strong></li>
<li><strong>《必然》</strong></li>
</ul>


<blockquote><p>还来，你以为我这么喜欢看书的啊，但是凯文•凯利的，那就勉强看看吧。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a DSL in Ruby]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/16/build-a-dsl-in-ruby/"/>
    <updated>2016-02-16T10:23:27+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/16/build-a-dsl-in-ruby</id>
    <content type="html"><![CDATA[<p>DSL（领域专用语言，Domain Specific Language）不是一个新的技术概念，并且构建是困难的。
其至少包含两个内容：</p>

<ol>
<li>一个用于解析 DSL 的 Parser</li>
<li>使用 DSL 写出来的程序</li>
</ol>


<h2>构建一个简单的 Quiz DSL</h2>

<p>最终我们想达到的效果便是，当运行程序之后，会让用户做选择题，并且统计回答正确的题数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Who was the first president of the USA?
</span><span class='line'>1 - Fred Flintstone
</span><span class='line'>2 - Martha Washington
</span><span class='line'>3 - George Washington
</span><span class='line'>4 - George Jetson
</span><span class='line'>Enter your answer:</span></code></pre></td></tr></table></div></figure>


<p>期望的表达语法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># questions.qm</span>
</span><span class='line'>
</span><span class='line'><span class="n">question</span> <span class="s2">&quot;Who was the first president of the USA?&quot;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;Fred Flintstone&#39;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;Martha Washington&#39;</span>
</span><span class='line'><span class="n">right</span> <span class="s1">&#39;George Washington&#39;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;George Jetson&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">question</span> <span class="s1">&#39;Who is buried in Grant\&#39;s tomb?&#39;</span>
</span><span class='line'><span class="n">right</span> <span class="s1">&#39;U. S. Grant&#39;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;Cary Grant&#39;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;Hugh Grant&#39;</span>
</span><span class='line'><span class="n">wrong</span> <span class="s1">&#39;W. T. Grant&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个简单的 Parser</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># quizm.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">question</span> <span class="n">text</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Just read a question: </span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">wrong</span> <span class="n">text</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Just read a correct answer: </span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">right</span> <span class="n">text</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Just read an incorrect answer: </span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;./questions.qm&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>编译的 Parse Phase，最终都是为了得到 AST（抽象语法树）这样类型的数据结构，所以，我们
先定义我们的数据结构：<code>Question</code> 和 <code>Answer</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># quiz.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Answer</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:text</span><span class="p">,</span> <span class="ss">:correct</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">text</span><span class="p">,</span> <span class="n">correct</span>
</span><span class='line'>    <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>    <span class="vi">@correct</span> <span class="o">=</span> <span class="n">correct</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Question</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">text</span>
</span><span class='line'>    <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>    <span class="vi">@answers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_answer</span> <span class="n">answer</span>
</span><span class='line'>    <span class="vi">@answers</span> <span class="o">&lt;&lt;</span> <span class="n">answer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ask</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Question: </span><span class="si">#{</span><span class="vi">@text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="vi">@answers</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">answer</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">answer</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Enter answer: &quot;</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="vi">@answers</span><span class="o">[</span><span class="n">answer</span><span class="o">].</span><span class="n">correct</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>构建简单的 vm，赋予程序存储 DSL 内容的能力</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># quiz.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Quiz</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@questions</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_question</span> <span class="n">question</span>
</span><span class='line'>    <span class="vi">@questions</span> <span class="o">&lt;&lt;</span> <span class="n">question</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_question</span>
</span><span class='line'>    <span class="vi">@questions</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run_quiz</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@questions</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">q</span><span class="o">.</span><span class="n">ask</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;You got </span><span class="si">#{</span><span class="n">count</span><span class="si">}</span><span class="s2"> answers correct out of </span><span class="si">#{</span><span class="vi">@questions</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>载入、解析、存储、运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./quiz&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">question</span> <span class="n">text</span>
</span><span class='line'>  <span class="no">Quiz</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">add_question</span> <span class="no">Question</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">wrong</span> <span class="n">text</span>
</span><span class='line'>  <span class="no">Quiz</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">last_question</span><span class="o">.</span><span class="n">add_answer</span> <span class="no">Answer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">right</span> <span class="n">text</span>
</span><span class='line'>  <span class="no">Quiz</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">last_question</span><span class="o">.</span><span class="n">add_answer</span> <span class="no">Answer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;./questions.qm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Quiz</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">run_quiz</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gif 效果图</h2>

<p><img src="http://www.justqyx.me/downloads/images/dsl.gif"></p>

<h2>Ref</h2>

<ul>
<li><a href="http://jroller.com/rolsen/entry/building_a_dsl_in_ruby">Building a DSL in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking About Education]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/thinking-education/"/>
    <updated>2016-02-15T15:18:32+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/thinking-education</id>
    <content type="html"><![CDATA[<p>前阵子在即刻上面订阅了「任志强写了新的长文章」，
最近任志强写了一篇 <a href="http://weibo.com/ttarticle/p/show?id=2309403942132896391799">有感而发（六）敎育</a>。</p>

<blockquote><p>美国的敎育是以案例为主的启发式敎育。通过案例将一些市场规律和发展方式展现出来，
让学员学会的是分析问题的方法和解决问题的思路，培养管理者独立思考的能力，而不是给你一个标准的答案。
告诉你多种方案中的利弊和可能发生的变化，让管理者根据自己的特长和优势选择对自己最有利的发展战略。</p>

<p>回想中国的敎育，大多是只给你灌输一个自认为正确的标准答案。
不是培养和开发学生的分析问题的方法，不是培育学生独立思考的能力，甚至不许有对标准答案质疑和探讨，更不许提出不同或否定的看法。
最严厉的惩罚则是只要与标准答案不同就只能得零分。
这一处罚的规定则起到的是不需要再努力思考的抑制作用。</p>

<p>独立思考意味着你要承担思考的后果和责任。独立思考才会产生责任感和创造性。
我们不但想知道答案，更要知道为什么？或者为什么不是另外一个比较中的最优选择？</p></blockquote>

<p>文章的许多观点，现实生活中大多数人早已深刻认识到，但我却属于后知后觉的一类。
直到 2012 年看到了一段话，才幡然觉醒，这几年随着对生活愈多的思考，愈加深刻的意识。</p>

<blockquote><p>德国两百年前的教育宣言曾经如此说到：教育的目的，不是培养人们适应传统的世界，不是着眼于实用性的知识和技能，
而是要去唤醒学生的力量，培养他们自我学习的主动性、抽象的归纳力和理解力，
以便使他们在目前无法预料的种种未来局势中，自我作出有意义的选择。</p></blockquote>

<p>其实在前面的<a href="http://www.justqyx.me/blog/2015/01/03/deep-thinking-about-my-2014/">博文</a>中，也早已谈过这样的事，
我不禁深入沉思：这几年我究竟有哪些变化，我有限的生命究竟想做和能做什么事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Good Programming Engineer]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/be-a-good-programming-engineer/"/>
    <updated>2016-02-15T14:19:26+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/be-a-good-programming-engineer</id>
    <content type="html"><![CDATA[<p>接上次的一篇短博文，张克军的观点给了我接下来的学习指明了方向。</p>

<blockquote><p>对待技术发展要保持开放的心态，保持好奇心，持续学习。
如前面所述，要分清哪些是玩玩，哪些是工作需要，哪些需要深入学习</p></blockquote>

<p>最近，技术圈子的 <a href="http://weibo.com/u/1088413295">@Easy</a> 就 <a href="http://weibo.com/p/1003061170999921">@Laruence</a> 发的一条微博
也写了一篇关于不错的文章：<a href="http://weibo.com/ttarticle/p/show?id=2309403939907201539934">程序员是一个什么职业</a>。<br/>
文章虽然简短，但表述的观点具有发人深省的意义。</p>

<p>观点1：<strong>工程的本质不是创造，而是去风险化</strong></p>

<blockquote><p>工程是关于如何低成本、高效率、按时按量完成既定任务。所以判断一个工程师是否优秀，
并不是他多有创意多有名气，而是看他有多稳，看他多能 Get Things Done，中文就是「靠谱」。</p></blockquote>

<p>观点2：<strong>工程的另一个要求就是进度控制和质量控制</strong></p>

<blockquote><p>代码的及时入库与合并，自动化测试和每日构建，Code Review 和文档编写，这些看似无关紧要的习惯则决定了项目的质量。</p></blockquote>

<p>程序员职业路线</p>

<p><img src="http://www.justqyx.me/downloads/images/programming_career.jpg"></p>

<p><strong>这的确是程序员的一条职业路线图。但是媒体们不愿意告诉你的是</strong></p>

<blockquote><p>一：只有极少数程序员是通过这个路线成功的；<br/>
二：这条线其实需要太多非程序员职位的技能，比如产品设计能力和销售能力。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/merge-sort/"/>
    <updated>2016-02-15T09:23:24+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/merge-sort</id>
    <content type="html"><![CDATA[<p>归并排序（Merge sort），是建立在归并操作上的一种有效排序算法，时间复杂度为 O(n*log(n))。1945 年由约翰•冯•诺依曼首次提出。
该算法采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p>

<h2>算法步骤</h2>

<p><strong>递归法</strong></p>

<ol>
<li>将序列每相邻两个数字进行归并操作，形成 floor(n/2) 个序列，排序后每个序列至多包含两个元素</li>
<li>将上述序列再次合并，形成 floor(n/4) 个序列，买个序列包含至多四个元素</li>
<li>重复步骤 2，直到所有元素排序完毕</li>
</ol>


<p>要点：首先需要将数列分割成尽可能小的数列，达到分治目的后再逐步合并。</p>

<p><strong>迭代法</strong></p>

<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入合并空间，并移动指针到下一位置</li>
<li>重复 3 步骤直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>


<h2>GIF 演示图</h2>

<p><img src="http://www.justqyx.me/downloads/images/Merge-sort-example-300px.gif"></p>

<h2>归并排序 VS 快速排序</h2>

<ul>
<li>在实践中，快速排序执行速率更快</li>
<li>归并排序首先将数列划分为最小的数列，在对数列进行排序的同时，递增地对数列进行合并</li>
<li>快速排序不断地通过 pivot 划分数列，直到数列递归地有序</li>
</ul>


<h2>实现</h2>

<p><strong>ruby 实现</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>    <span class="n">final</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">until</span> <span class="n">left</span><span class="o">.</span><span class="n">empty?</span> <span class="ow">or</span> <span class="n">right</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">final</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">left</span><span class="o">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">.</span><span class="n">first</span> <span class="p">?</span> <span class="n">left</span><span class="o">.</span><span class="n">shift</span> <span class="p">:</span> <span class="n">right</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">final</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">array</span> <span class="k">if</span> <span class="n">array</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">merge</span><span class="p">(</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">pivot</span><span class="o">]</span><span class="p">),</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">pivot</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">-</span><span class="mi">1</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>C 实现（递归法）</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">merge_sort_recursive</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">reg</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">start</span><span class="p">);</span> <span class="c1">// 右移一位，相当于除以 2</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">end1</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">end2</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="n">start1</span><span class="p">,</span> <span class="n">end1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="n">start2</span><span class="p">,</span> <span class="n">end2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 三个 while 实现了两个序列的有序合并</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">end1</span> <span class="o">&amp;&amp;</span> <span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">end2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">reg</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="p">]</span> <span class="o">?</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">]</span> <span class="o">:</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;=</span> <span class="n">end1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">reg</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">start2</span> <span class="o">&lt;=</span> <span class="n">end2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">reg</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">arr</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">reg</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">reg</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
</span><span class='line'>    <span class="n">merge_sort_recursive</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>C 实现（迭代法）</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">min</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">arr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">seg</span><span class="p">,</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 使得内循环的 2seg+1 片段指数级变大，达到递归的效果</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">seg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">seg</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">seg</span> <span class="o">+=</span> <span class="n">seg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 对 2seg+1 片段进行有序化</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">start</span> <span class="o">+=</span> <span class="n">seg</span> <span class="o">+</span> <span class="n">seg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">seg</span><span class="p">,</span> <span class="n">len</span><span class="p">),</span> <span class="n">high</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">seg</span> <span class="o">+</span> <span class="n">seg</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">low</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">low</span><span class="p">,</span> <span class="n">end1</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end2</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;</span> <span class="n">end1</span> <span class="o">&amp;&amp;</span> <span class="n">start2</span> <span class="o">&lt;</span> <span class="n">end2</span><span class="p">)</span>
</span><span class='line'>              <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="p">]</span> <span class="o">?</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">]</span> <span class="o">:</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">start1</span> <span class="o">&lt;</span> <span class="n">end1</span><span class="p">)</span>
</span><span class='line'>              <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start1</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">start2</span> <span class="o">&lt;</span> <span class="n">end2</span><span class="p">)</span>
</span><span class='line'>              <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">start2</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">*</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ref</h2>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">wikipedia 归并排序</a></li>
<li><a href="https://ruby-china.org/topics/20569">https://ruby-china.org/topics/20569</a></li>
<li><a href="http://blog.jobbole.com/90256/">http://blog.jobbole.com/90256/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速排序]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/14/quick-sort/"/>
    <updated>2016-02-14T17:38:13+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/14/quick-sort</id>
    <content type="html"><![CDATA[<p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p>

<h2>算法步骤</h2>

<p><strong>递归法</strong></p>

<ol>
<li>从数列中挑出一个元素，称为基准（pivot）</li>
<li>重新排序数列，所有比 pivot 小的元素摆放在 pivot 左边，大的摆放在 pivot 右边。这个操作称为分割（partition）</li>
<li>递归地把 pivot 两边的子数列按 1 和 2 步骤继续排序</li>
</ol>


<p>要点：通过 pivot 不断地将数列分割成两个数列，达到分治的目的。</p>

<h2>时间复杂度</h2>

<ul>
<li>最好：O(n)</li>
<li>平均：O(n*log(n))</li>
<li>最差：O(n<sup>2</sup>)</li>
</ul>


<p>空间复杂度，不同实现不同。</p>

<p>快排在实践中，执行速度明显比其他具有相同时间复杂度的排序算法快。</p>

<h2>gif 演示图</h2>

<p><img src="http://www.justqyx.me/downloads/images/Quicksort-example.gif"></p>

<h2>实现</h2>

<p>Ruby 实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">quick_sort</span> <span class="n">arr</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arr</span> <span class="k">if</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">left_arr</span><span class="p">,</span> <span class="n">right_arr</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">partition</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="o">&lt;=</span> <span class="n">arr</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">left_arr</span><span class="p">)</span> <span class="o">+</span> <span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="n">first</span><span class="o">]</span> <span class="o">+</span> <span class="n">quick_sort</span><span class="p">(</span><span class="n">right_arr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>C 实现（递归）</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">start</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span> <span class="o">&amp;&amp;</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>            <span class="n">right</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">arr</span><span class="p">[</span><span class="n">end</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">end</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://visualgo.net/sorting.html">http://visualgo.net/sorting.html</a></li>
<li><a href="https://ruby-china.org/topics/20569">经典排序算法及 Ruby 实现</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#C.E8.AA.9E.E8.A8.80">wikipedia-快速排序</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于最近的前端界吵架]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/03/frontend-talk/"/>
    <updated>2016-02-03T14:53:12+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/03/frontend-talk</id>
    <content type="html"><![CDATA[<p>前阵子，尤雨溪和真阿当在微博上吵架的事情，估计已经传播到
整个技术界了。其实真没什么好吵的，但是我那几天还是乐滋滋地
每天上微博刷。</p>

<h2>争论的方法</h2>

<p>真阿当更多地是凭借自己所接触到的所以为的客观事实地下结论，
没有足够的数据支撑，且带着过了度的情绪在争论。
而尤雨溪则更多地想去阐述每个工具的出现都有其背景历史以及想要解决的问题。</p>

<p>离开技术的范畴，我支持尤雨溪的争论方法和态度。</p>

<h2>没有必要的争论</h2>

<p>真阿当所主张的基础很重要，与工具的出现其实并没有冲突，
工具的出现主要解决软件开发过程中所出现的工程学问题，
并不是为了解决初学者基础不足的问题。</p>

<h2>我认同张克军的观点</h2>

<p><a href="https://www.zhihu.com/question/38924821#answer-26964768">https://www.zhihu.com/question/38924821#answer-26964768</a></p>

<blockquote><p>对待技术发展要保持开放的心态，保持好奇心，持续学习。
如前面所述，要分清哪些是玩玩，哪些是工作需要，哪些需要深入学习</p></blockquote>

<p>这话点醒了我，因为目前，我在技术学习的时间分配上非常不合理。
日常保持着对不同技术领域资讯的跟进，由于时间分配不合理，
加上工作上也没有此方面的实践机会，始终有一种看了这么多但究竟有什么用的心态。</p>

<h2>对待争论</h2>

<ul>
<li>识别两方争论的点</li>
<li>识别两方争论的方法以及其论据</li>
<li>不站队，只获取对自己有益的信息即可</li>
</ul>


<p>这是个最坏的时代，也是最好的时代。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP 链路是如何 Keep-Alive 的]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/03/tcp-chain/"/>
    <updated>2016-02-03T13:51:50+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/03/tcp-chain</id>
    <content type="html"><![CDATA[<p>之前一直没有搞明白，HTTP 链路（即 TCP 链路）是如何 Keep-Alive 的。
这其实只是一个基础知识，只有知道与不知道的区别而已。</p>

<h2>如何定义一条 TCP 连接</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;源IP地址、源端口号、目的IP地址、目的端口号&gt;</span></code></pre></td></tr></table></div></figure>


<p>这四个值一起唯一地定义了一条连接。两条不同的 TCP 连接不能拥有 4 个完全相同
的地址组件值。</p>

<h2>TCP 链路</h2>

<p>数据从我们的计算机发出，在到达目标机器之前，需要经过许多其他结点。
这其中的每一个结点，需要维护两个 TCP 连接对象，使其能够与上一个结点和下一个结点通讯，
类似双向链表。</p>

<p>于是，一条链路就这么形成了。</p>

<p>一旦其中某个结点断开了连接，即移除了 TCP 连接对象，那么整条链路也就断开了，
并以主动断开或主动探测或超时断开的机制，对整条链路的 TCP 连接对象进行回收。</p>

<h2>TCP 连接是昂贵的</h2>

<p>建立 TCP 连接需要首先建立起通讯链路，并完成三次握手，故建立 TCP 连接的操作是昂贵的。
因此，以下依次出现的三种机制，是为了对 TCP 链路资源有更高效率的使用。</p>

<p><strong>Keep-Alive</strong></p>

<p>这是 HTTP/1.0 规范中增加的，但 HTTP/1.1 已经废弃。
为的是在完成 HTTP 事务操作之后保持 TCP 连接不关闭，使得下一个请求发起时，不再需要重新建立 TCP 连接。</p>

<p><strong>Persistent</strong></p>

<p>与 HTTP/1.0+ 的 Keep-Alive 连接不同，HTTP/1.1 的连接在默认情况下是激活的，
除非特别指明，否则 HTTP/1.1 假定所有连接都是持久的。要在事务处理结束之后将
连接关闭，HTTP/1.1 应用程序必须向报文中显示地增加一个 <code>Connection: Close</code> 首部。
这是与以前的 HTTP 协议版本很重要的区别，在以前的版本中，Kepp-Alive 连接要么是可选的，
要么根本就不支持。</p>

<p><strong>管道化连接</strong></p>

<p>HTTP/1.1 允许在持久连接上可选地使用请求管道。这是相对于 Keep-Alive 连接的又一次性能优化。
在响应到达之前，可以将多条请求放入队列。当第一条请求通过网络流向地球另一端的服务器时，
第二条和第三条请求也可以开始发送了。在高时延网络条件下，这样做可以降低网络的环回时间，
提高性能。</p>

<p>无论是 Keep-Alive 还是 Persistent 还是管道，HTTP 客户端都必须做好所有可能出错的情况，
因为在网络的世界里，每个结点都无法保证连接在那一刻是可用的，每个结点都可能随时关闭 TCP 连接。</p>

<h2>参考</h2>

<ul>
<li>《HTTP 权威指南》</li>
</ul>

]]></content>
  </entry>
  
</feed>
