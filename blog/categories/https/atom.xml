<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: https | JustQyx]]></title>
  <link href="http://www.justqyx.me/blog/categories/https/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:29:17+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate a self-signed CA certificate]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/05/use-openssl-to-generate-a-self-signed-ca/"/>
    <updated>2016-08-05T23:59:59+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/05/use-openssl-to-generate-a-self-signed-ca</id>
    <content type="html"><![CDATA[<h2>生成根证书</h2>

<pre><code class="bash">mkdir -p test/demoCA &amp;&amp; cd test/demoCA
mkdir certs crl newcerts private
chmod 700 private
touch index.txt
echo 1000 &gt; serial
vim openssl.cnf

openssl genrsa -aes256 -out private/ca.key.pem 4096
chmod 400 private/ca.key.pem

openssl req -config openssl.cnf \
        -key private/ca.key.pem \
        -new -x509 -days 7300 -sha256 -extensions v3_ca \
        -out certs/ca.cert.pem
</code></pre>

<p><strong>验证</strong></p>

<pre><code>openssl x509 -noout -text -in certs/ca.cert.pem
</code></pre>

<h2>生成服务器证书，并用根证书签名</h2>

<p>1、生成服务器私钥</p>

<pre><code class="bash">cd test
openssl genrsa -aes256 -out server.key 2048
openssl rsa -in server.key -out server.key
</code></pre>

<p>2、生成服务器请求证书</p>

<pre><code class="bash">openssl req -new -key server.key -out server.csr
</code></pre>

<p>3、用 CA 证书给服务器请求证书签名</p>

<pre><code class="bash">openssl ca -config ./demoCA/openssl.cnf \
           -in server.csr -out server.crt \
           -cert ./demoCA/certs/ca.cert.pem \
           -keyfile ./demoCA/private/ca.key.pem \
           -startdate 100707000000Z \
           -enddate 300707000000Z
</code></pre>

<p>输入之后会要求你输入一些信息，其中最为重要的便是 <code>Server Name</code> 这个必须与域名一直，否则即使设置了信任，浏览器仍然会提示证书有问题。</p>

<pre><code>Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Guangdong
Locality Name (eg, city) []:Shenzhen
Organization Name (eg, company) [Internet Widgits Pty Ltd]:随便填
Organizational Unit Name (eg, section) []:随便填
Common Name (e.g. server FQDN or YOUR name) []:localhost（这里一定要是你要签的域名）
Email Address []:hzuqiuyuanxin@gmail.com
</code></pre>

<h2>DEMO</h2>

<p>拿到上面的根证书 <code>ca.cert.pem</code>，导入浏览器并设置为信任，然后取得 <code>server.crt</code> 以及 <code>server.key</code> 放到某个位置，
是的 nginx 可以读取到，nginx 配置例子如下：</p>

<pre><code>   server {
        listen 443;
        server_name localhost;

        ssl                   on;
        ssl_certificate       /usr/local/etc/nginx/ca/server.crt;
        ssl_certificate_key   /usr/local/etc/nginx/ca/server.key;

        ssl_session_timeout   5m;

        location / {
            root /Users/yuanxin/www;
            index index.html index.htm;
        }
    }
</code></pre>

<p>检查 nginx 的语法，如果没有问题则 reload 配置</p>

<pre><code class="bash">sudo nginx -t
sudo nginx -s reload
</code></pre>

<p>打开浏览器访问：<code>https://localhost</code></p>

<h2>参考</h2>

<ul>
<li><a href="https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html">Create the root pair</a></li>
<li><a href="http://walkerqt.blog.51cto.com/1310630/946122">OpenSSL证书生成(Windows环境)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 启用 HTTPS]]></title>
    <link href="http://www.justqyx.me/blog/2016/05/08/enable-https-in-nginx/"/>
    <updated>2016-05-08T17:01:17+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/05/08/enable-https-in-nginx</id>
    <content type="html"><![CDATA[<p>维基百科关于 HTTPS 的介绍 <br/>
<a href="https://en.wikipedia.org/wiki/HTTPS">https://en.wikipedia.org/wiki/HTTPS</a></p>

<h2>服务器设置的步骤</h2>

<ol>
<li>管理员创建 <code>数字证书</code></li>
<li>交由 <code>证书颁发机构</code> 签名</li>
<li>nginx 配置</li>
</ol>


<p>浏览器通常都安装了证书颁发机构的证书，所以他们可以验证该签名。<br/>
所以如果你自己创建了一个证书颁发机构，你得让浏览器安装你自己常见的证书颁发机构的证书。</p>

<h2>创建数字证书</h2>

<p>首先需要安装好 openssl，这里不做介绍</p>

<p>1、Generate a 2048bit RSA private key and save it to a file</p>

<pre><code class="bash">openssl genrsa -out server.key 2048
</code></pre>

<p>2、Generate a certificate signing request to be sent to a certificate authority
<code>bash
openssl req -new -sha256 -key server.key -out server.csr
</code></p>

<h2>对服务器证书进行签名</h2>

<p>由于这里是测试，所以我们创建一个自签名（self-signed）的数字证书。</p>

<p>Generate a self-signed certificate from a certificate signing request valid for some number of days:</p>

<pre><code class="bash">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</code></pre>

<p>最后，将生成的 <code>server.crt</code> 在浏览器端设置为信任即可。</p>

<h2>nginx 配置</h2>

<pre><code>server {
    listen 443;
    server_name https.example.com;

    ssl                   on;
    ssl_certificate       /opt/www/https-example/server.crt;
    ssl_certificate_key   /opt/www/https-example/server.key;

    ssl_session_timeout   5m;

    location / {
        root /opt/www/https-example;
        index index.html index.htm;
    }
}
</code></pre>

<p>重启 nginx</p>

<pre><code class="bash"># ubuntu
sudo service nginx -s reload

# Mac OSX
sudo nginx -s reload
</code></pre>

<p>打开浏览器，访问</p>

<pre><code>https://https.example.com
</code></pre>
]]></content>
  </entry>
  
</feed>
