<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: db | JustQyx]]></title>
  <link href="http://www.justqyx.me/blog/categories/db/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:29:17+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis Learning Note]]></title>
    <link href="http://www.justqyx.me/blog/2013/10/26/redis-note/"/>
    <updated>2013-10-26T14:23:00+00:00</updated>
    <id>http://www.justqyx.me/blog/2013/10/26/redis-note</id>
    <content type="html"><![CDATA[<h2>安装</h2>

<ul>
<li>使用 Homebrew 安装</li>
</ul>


<pre><code>$ brew install redis
</code></pre>

<ul>
<li>下载源码，手动编译</li>
</ul>


<pre><code>$ wget http://download.redis.io/redis-stable.tar.gz
$ tar xvzf redis-stable.tar.gz
$ cd redis-stable
$ make &amp;&amp; make install
</code></pre>

<h2>支持的数据类型</h2>

<p><code>字符串</code> <code>散列表</code> <code>列表</code> <code>集合</code> <code>有序集合</code></p>

<h2>事务</h2>

<p>通过使用 <code>MULTI</code> 和 <code>EXEC</code> 来实现事务。</p>

<pre><code>redis &gt; MULTI
OK
redis &gt; SET key1 value
QUEUED
redis &gt; SET key2 value
QUEUED
redis &gt; EXEC
1) (Integer) 1
2) (Integer) 2
</code></pre>

<p>为了保证在执行事务的过程中，key1 或 key2 的值不会被其他进程所改变（即：竟态），</p>

<p>Redis 提供了 <code>WATCH</code> 命令：</p>

<pre><code>redis 127.0.0.1:6379&gt; SET key 1
OK
redis 127.0.0.1:6379&gt; watch key
OK
redis 127.0.0.1:6379&gt; set key 2
OK
redis 127.0.0.1:6379&gt; MULTI
OK
redis 127.0.0.1:6379&gt; set key 3
QUEUED
redis 127.0.0.1:6379&gt; exec
(nil)
redis 127.0.0.1:6379&gt; GET key
"2"
redis 127.0.0.1:6379&gt;
</code></pre>

<p>我们可以看到，因为在 WATCH 命令之后修改了 key 的值，因此事务没有执行成功，key 的值也就是 &ldquo;2"。</p>

<h2>持久化</h2>

<h3>第一种：RDB（默认, Redis Database）</h3>

<p>其特点有二：</p>

<ol>
<li>每一次持久化的数据，是内存中<code>某一时刻的数据</code></li>
<li>每一次持久化具有<code>原子性</code>，即完成之前，不会对先前的持久化数据产生影响，只有完成后，才会覆盖原先的数据</li>
</ol>


<p>其过程大致如下：</p>

<ol>
<li>Redis 使用 fork 函数复制一份当前进程（父进程）的副本（子进程）；</li>
<li>父进程继续接收并处理客户端的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；</li>
<li>当子进程写入完所有数据后会用该临时文件替换旧的 RDB 文件，至此一次快照操作完成。</li>
</ol>


<p><a href="http://redis.io/commands/bgsave">相关命令</a></p>

<pre><code>&gt; BGSAVE
&gt; LASTSAVE
</code></pre>

<h3>第二种：AOF（append only file）</h3>

<p>其原理是将命令写入文件中，Redis重启时，读入AOF文件，执行每条命令将值写入内存中。</p>

<p><strong>优化及写入的频率</strong></p>

<p>随着执行的命令越来越多，AOF文件也会越来越大，冗余的命令就会出现，如：</p>

<pre><code>&gt; set foo 1
&gt; set foo 2
&gt; set foo 3
</code></pre>

<p>这样一来，前面两条命令是冗余的，于是可以删除前两条命令，只保留第三条命令。我们可以在配置里让 Redis 自动去做：</p>

<pre><code>auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
</code></pre>

<p>也可以手动执行：</p>

<pre><code>&gt; BGREWRITEAOF
</code></pre>

<p>随便每次执行更改数据库内容时，AOF 都会将命令记录在 AOF 文件中，</p>

<p>但事实上由于操作系统的缓存机制，数据并没有真正地写入硬盘，而是进入了系统的硬盘缓存。</p>

<p>我们可以主动要求操作系统将缓存内容同步到硬盘中，在 Redis 中，我们可以通过 appendfsync 参数设置同步的实际：</p>

<pre><code># appendfsync always
appendfsync eversec
# appendfsync no        
</code></pre>

<p><code>always</code>，表示每次执行写入都会执行同步，这是最安全，也是最慢的方式。</p>

<p><code>everysec</code>，表示美标执行一次同步操作。</p>

<p><code>no</code>，完全交由操作系统来做，即 30s 同步一次。</p>

<h2>主从复制</h2>

<p>例如有两台服务器，A（192.168.1.100:6379），B（192.168.1.101:6379），以 A 为主数据库。</p>

<p>A 服务器</p>

<pre><code>$ redis-server
</code></pre>

<p>B 服务器</p>

<pre><code>$ redis-server --slaveof 192.168.1.100 6379
</code></pre>

<p>B服务器终止同步，进入客户端：<code>$ redis-cli</code></p>

<pre><code>redis &gt; SLAVEOF NO ONE
</code></pre>
]]></content>
  </entry>
  
</feed>
