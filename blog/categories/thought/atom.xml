<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thought | JustQyx]]></title>
  <link href="http://www.justqyx.me/blog/categories/thought/atom.xml" rel="self"/>
  <link href="http://www.justqyx.me/"/>
  <updated>2021-09-27T06:28:44+00:00</updated>
  <id>http://www.justqyx.me/</id>
  <author>
    <name><![CDATA[邱源鑫]]></name>
    <email><![CDATA[hzuqiuyuanxin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快]]></title>
    <link href="http://www.justqyx.me/blog/2016/08/13/fast/"/>
    <updated>2016-08-13T14:17:52+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/08/13/fast</id>
    <content type="html"><![CDATA[<p>从开始接触以项目式的程序开发至今，总有这种的一种声音或者原则在驱动着做事：先解决问题。</p>

<p>不懂什么是 WEB，  没关系，先按葫芦画瓢做一个网页<br/>
不懂什么是 MVC，  没关系，先按葫芦画瓢做一个网页<br/>
不懂什么是 AJAX， 没关系，先按葫芦画瓢做一个数据提交和响应<br/>
不懂怎么写 SQL，  没关系，用 Rails 的 ActiveRecord<br/>
不懂什么是 Linux，没关系，先学会这几句命令<br/></p>

<p>几乎所有的东西都不懂，也就需要花越多的时间尝试，先解决问题的方式诚然在初期效果很明显。<br/>
但随着时间的流逝，我越来越困惑，是巨大的困惑。<br/></p>

<p>二十几岁的我，最大的困惑就是不知道自己人生的答案，想做什么、该做什么等等。<br/>
技术上，很多都仅仅是懂一点点，对比他人突然发现自己的学习能力相当差，不具备系统性学习以及实践某一知识领域的能力。</p>

<p>发现后者这一点后，我一直沮丧到现在，因为仍然没有任何本质上的改变。<br/>
在这个过程中，我全盘否定了自己的过去，充满着无力感。<br/>
没有特长、没有喜欢的事物、没有背景又没有学习能力、没有激情。<br/></p>

<p>做程序开发，我谈不上喜欢，也谈不上讨厌，这通常等价于平庸。但有时候会出现一些意外的瞬间</p>

<ul>
<li>有时候解决了一些问题，非常开心</li>
<li>有个 nice 的上司，想更加努力获得他的认可</li>
<li>看到有些有趣的东西，会想要动手试试，虽然几乎所有情况是到了最后什么也没做</li>
</ul>


<p>现在的我想慢下来，把 60 分提高到 61 分。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do I collect tech infomation]]></title>
    <link href="http://www.justqyx.me/blog/2016/03/04/how-do-i-collect-tech-infomation/"/>
    <updated>2016-03-04T10:55:14+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/03/04/how-do-i-collect-tech-infomation</id>
    <content type="html"><![CDATA[<p>作为一个「图样图森破」的人，向前辈学习是我的主旋律，以下是我获取信息和知识的主要渠道。</p>

<h2>微信公众号</h2>

<p>关注一些冯大辉、池建强、三表龙门阵、李笑来、吴晓波频道、caozsay等公号，常能够获取到一些有趣的东西。</p>

<h2>微博 &amp;&amp; twitter</h2>

<p>国内外的牛人或是技术达人，都常年活跃在微博和 twitter，关注他们日常所关注的，适当地选择一些点作为自己进步的方向标，不断地思考和修正自己的方向。</p>

<p>同时有名的开源项目在 twitter 都有官方账号，可以在那里获得最新相关的资讯。</p>

<p>社交网站能够让我对最新的技术或者一些大事件保持敏感，同时使用 Pocket 保存一些觉得有用的网页并打上标签分类，不时地拿出来翻翻。</p>

<h2>播客</h2>

<p>IPN 旗下的节目都不错，另外作为一个 Rubist 也应该订阅 Teahour。</p>

<h2>博客</h2>

<p>自从 Google Reader 关闭之后，我开始使用 Feedly 订阅一些好的博客，内容一般是日常开发中遇到的问题以及相应的解决方案。</p>

<h2>书籍</h2>

<p>真正的干货，永远只存在于好的书籍里，推荐《如何阅读一本书》，它可以指导你如何阅读一本书，同时也指导你如何去选一本好书。</p>

<p>好的书籍则能够让你更加脚踏实地地进步，它相当于这本书的作者在非常认真地跟你讲 ta 在这个领域所掌握的知识，这是花多少钱都买不来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年要读的书]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/16/books-reading-this-year/"/>
    <updated>2016-02-16T14:37:35+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/16/books-reading-this-year</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>得益于如今的互联网和技术圈的氛围，使得我可以不断地修正自己的方向。</p>

<h2>List</h2>

<ul>
<li><strong>《批判性思维：带你走出思维的误区》</strong></li>
</ul>


<blockquote><p>出生在农村的我，先天教育的落后，导致我智商、情商都落后，加上信息透明度不够，<br/>
在这社会行走，太容易被人忽悠。<br/>
人傻要多读书，人傻要多读书，人傻要多读书。</p></blockquote>

<ul>
<li><strong>《垃圾回收的算法与实现》</strong></li>
</ul>


<blockquote><p>今年将要出版的一本书，<a href="https://twitter.com/_kaichen">@陈恺</a>师兄介绍，他正在帮忙审查这本书。<br/>
Ruby 的 GC 话题在 2014 和 2015 年都非常火，最新几个版本的重点也都在于对虚拟机性能的提升。</p></blockquote>

<ul>
<li><strong>《HTTP 权威指南》</strong></li>
<li><strong>《Webkit 技术内幕》</strong></li>
<li><strong>《白帽子讲 Web 安全》</strong></li>
</ul>


<blockquote><p>与其在网上看一堆文章（特别是百度搜出来的），还不如静下心来看看书，这才是精华。<br/>
另外，我只用谷歌，最差也是 global.bing.com。</p></blockquote>

<ul>
<li><strong>《领域特定语言》</strong></li>
<li><strong>《企业应用架构模式》</strong></li>
</ul>


<blockquote><p>这两年或多或少接触这些领域的概念，但一直没有迈开脚步，有许多原因，现在就先迈出一步吧。<br/>
工程化，是我接下来需要修习的一门课。</p></blockquote>

<ul>
<li><strong>《写给大家看的设计书》</strong></li>
</ul>


<blockquote><p>我讨厌不好看的 UI，就跟我用了 Mac 之后再也回不去 Windows 一样。<br/>
另外这篇扯淡博文，我调了四五次格式，但还是丑 &hellip;</p></blockquote>

<ul>
<li><strong>《创业维艰》</strong></li>
<li><strong>《从0到1：开启商业与未来的秘密》</strong></li>
</ul>


<blockquote><p>某一天，我也希望有自己的工作室或者公司，当老板的都是苦逼的，能不苦逼的，干的都是写在宪法里的事情。</p></blockquote>

<ul>
<li><strong>《激荡三十年（上）》</strong></li>
<li><strong>《激荡三十年（上）》</strong></li>
<li><strong>《货币战争：真相与未来》</strong></li>
</ul>


<blockquote><p>没错，我对财经也感兴趣。<br/>
前两本是前老板写的，没错，就是那个财经界的吴晓波，据说有一段时间，杭州武林门有一条街都是他的。<br/>
最后一本也许是个坑，还有也许三本都是坑。</p></blockquote>

<ul>
<li><strong>《失控》</strong></li>
<li><strong>《必然》</strong></li>
</ul>


<blockquote><p>还来，你以为我这么喜欢看书的啊，但是凯文•凯利的，那就勉强看看吧。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking about education]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/thinking-education/"/>
    <updated>2016-02-15T15:18:32+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/thinking-education</id>
    <content type="html"><![CDATA[<p>前阵子在即刻上面订阅了「任志强写了新的长文章」，
最近任志强写了一篇 <a href="http://weibo.com/ttarticle/p/show?id=2309403942132896391799">有感而发（六）敎育</a>。</p>

<blockquote><p>美国的敎育是以案例为主的启发式敎育。通过案例将一些市场规律和发展方式展现出来，
让学员学会的是分析问题的方法和解决问题的思路，培养管理者独立思考的能力，而不是给你一个标准的答案。
告诉你多种方案中的利弊和可能发生的变化，让管理者根据自己的特长和优势选择对自己最有利的发展战略。</p>

<p>回想中国的敎育，大多是只给你灌输一个自认为正确的标准答案。
不是培养和开发学生的分析问题的方法，不是培育学生独立思考的能力，甚至不许有对标准答案质疑和探讨，更不许提出不同或否定的看法。
最严厉的惩罚则是只要与标准答案不同就只能得零分。
这一处罚的规定则起到的是不需要再努力思考的抑制作用。</p>

<p>独立思考意味着你要承担思考的后果和责任。独立思考才会产生责任感和创造性。
我们不但想知道答案，更要知道为什么？或者为什么不是另外一个比较中的最优选择？</p></blockquote>

<p>文章的许多观点，现实生活中大多数人早已深刻认识到，但我却属于后知后觉的一类。
直到 2012 年看到了一段话，才幡然觉醒，这几年随着对生活愈多的思考，愈加深刻的意识。</p>

<blockquote><p>德国两百年前的教育宣言曾经如此说到：教育的目的，不是培养人们适应传统的世界，不是着眼于实用性的知识和技能，
而是要去唤醒学生的力量，培养他们自我学习的主动性、抽象的归纳力和理解力，
以便使他们在目前无法预料的种种未来局势中，自我作出有意义的选择。</p></blockquote>

<p>其实在前面的<a href="/blog/2015/01/03/deep-thinking-about-my-2014/">博文</a>中，也早已谈过这样的事，
我不禁深入沉思：这几年我究竟有哪些变化，我有限的生命究竟想做和能做什么事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A good programming engineer]]></title>
    <link href="http://www.justqyx.me/blog/2016/02/15/be-a-good-programming-engineer/"/>
    <updated>2016-02-15T14:19:26+08:00</updated>
    <id>http://www.justqyx.me/blog/2016/02/15/be-a-good-programming-engineer</id>
    <content type="html"><![CDATA[<p>接上次的一篇短博文，张克军的观点给了我接下来的学习指明了方向。</p>

<blockquote><p>对待技术发展要保持开放的心态，保持好奇心，持续学习。
如前面所述，要分清哪些是玩玩，哪些是工作需要，哪些需要深入学习</p></blockquote>

<p>最近，技术圈子的 <a href="http://weibo.com/u/1088413295">@Easy</a> 就 <a href="http://weibo.com/p/1003061170999921">@Laruence</a> 发的一条微博
也写了一篇关于不错的文章：<a href="http://weibo.com/ttarticle/p/show?id=2309403939907201539934">程序员是一个什么职业</a>。<br/>
文章虽然简短，但表述的观点具有发人深省的意义。</p>

<p>观点1：<strong>工程的本质不是创造，而是去风险化</strong></p>

<blockquote><p>工程是关于如何低成本、高效率、按时按量完成既定任务。所以判断一个工程师是否优秀，
并不是他多有创意多有名气，而是看他有多稳，看他多能 Get Things Done，中文就是「靠谱」。</p></blockquote>

<p>观点2：<strong>工程的另一个要求就是进度控制和质量控制</strong></p>

<blockquote><p>代码的及时入库与合并，自动化测试和每日构建，Code Review 和文档编写，这些看似无关紧要的习惯则决定了项目的质量。</p></blockquote>

<p>程序员职业路线</p>

<p><img src="/downloads/images/programming_career.jpg"></p>

<p><strong>这的确是程序员的一条职业路线图。但是媒体们不愿意告诉你的是</strong></p>

<blockquote><p>一：只有极少数程序员是通过这个路线成功的；<br/>
二：这条线其实需要太多非程序员职位的技能，比如产品设计能力和销售能力。</p></blockquote>
]]></content>
  </entry>
  
</feed>
